{"ast":null,"code":"export class Parser{static parseToDataWithComments(source){const parser=new Parser(tokenize(source));let data=[];while(parser.tokens.length){data.push(parser.parseDatumOrComment());}return data;}static parseToData(source){const parser=new Parser(discardComments(tokenize(source)));let data=[];while(parser.tokens.length){data.push(parser.parseDatum());}return data;}static parseToDatum(source){return new Parser(discardComments(tokenize(source))).parseDatum();}constructor(tokens){this.tokens=tokens;}parseDatumOrComment(){const next=this.tokens[0];if(isComment(next)){this.tokens.shift();return next;}return this.parseDatum();}parseDatum(){const next=this.tokens[0];if(next===undefined)throw\"expected datum, but found end of input\";switch(next){case\"(\":this.eat(\"(\");const list=this.parseList();this.eat(\")\");return list;case\")\":throw\"extraneous ')'\";case\"#t\":case\"#f\":this.tokens.shift();return{kind:\"Boolean\",value:next===\"#t\"};case\".\":throw`misplaced '.'`;default:this.tokens.shift();if(typeof next===\"number\"){return{kind:\"Number\",value:next};}else if(\"string\"in next){return{kind:\"String\",value:next.string};}else if(\"symbol\"in next){return{kind:\"Symbol\",value:next.symbol};}else{// Comment - should have been thrown away\nthrow\"comment token not allowed in this context\";}}}parseList(){let heads=[];let next;while((next=this.tokens[0])!=\")\"){if(heads.length>0&&next===\".\"){// (head1 head2 ... headN . tail)\n// eat '.'\nthis.tokens.shift();const tail=this.parseDatum();return{kind:\"List\",heads,tail};}else{heads.push(this.parseDatum());}}// (head1 head2 ... headN)\nreturn{kind:\"List\",heads};}eat(required){if(this.tokens.shift()!==required)throw`expected '${required}'`;}}function tokenize(source){let tokens=[];primary:while(source=source.trimStart()){if(source.startsWith(\";\")){source=source.slice(1);let text=\"\";while(source.length&&!source.startsWith(\"\\n\")){text+=source[0];source=source.slice(1);}tokens.push({kind:\"comment\",text});continue;}for(const token of[\"(\",\")\",\".\"]){if(source.startsWith(token)){source=source.slice(token.length);tokens.push(token);continue primary;}}const boolMatch=source.match(/^(#[tf])(?![a-zA-Z!$%&*\\/:<=>?^_~#0-9+\\-\\.@])/);if(boolMatch){const token=boolMatch[1];source=source.slice(token.length);tokens.push(token);continue primary;}if(source.startsWith('\"')){source=source.slice(1);let string=\"\";let char=source[0];let escape=false;while(escape||char!=='\"'){if(!source.length)throw\"unterminated string literal\";escape=!escape&&char===\"\\\\\";if(!escape){string+=char;}source=source.slice(1);char=source[0];}// Consume ending quotes\nsource=source.slice(1);tokens.push({string});continue;}let match=source.match(/^-?(\\d*\\.\\d+|\\d+)([eE][-+]?\\d+)?/);if(match){const[matchText]=match;source=source.slice(matchText.length);tokens.push(Number(matchText));continue;}match=source.match(/^·|[a-zA-Z!$%&*\\/:<=>?^_~#][a-zA-Z!$%&*\\/:<=>?^_~#0-9+\\-\\.@]*|\\+|\\-|\\.\\.\\.|→/);if(match){const[symbol]=match;source=source.slice(symbol.length);tokens.push({symbol});continue;}throw\"invalid token in source code\";}return tokens;}function isComment(token){return typeof token===\"object\"&&\"kind\"in token&&token.kind===\"comment\";}function discardComments(tokens){return tokens.filter(token=>!isComment(token));}","map":{"version":3,"names":["Parser","parseToDataWithComments","source","parser","tokenize","data","tokens","length","push","parseDatumOrComment","parseToData","discardComments","parseDatum","parseToDatum","constructor","next","isComment","shift","undefined","eat","list","parseList","kind","value","string","symbol","heads","tail","required","primary","trimStart","startsWith","slice","text","token","boolMatch","match","char","escape","matchText","Number","filter"],"sources":["/Users/hamzashahzad/Desktop/resume_projects/sparkground/src/datum/parse.ts"],"sourcesContent":["import { Datum, ListDatum } from \"./datum\";\n\nexport class Parser {\n  static parseToDataWithComments(source: string): (Datum | Comment)[] {\n    const parser = new Parser(tokenize(source));\n\n    let data: (Datum | Comment)[] = [];\n    while (parser.tokens.length) {\n      data.push(parser.parseDatumOrComment());\n    }\n\n    return data;\n  }\n\n  static parseToData(source: string): Datum[] {\n    const parser = new Parser(discardComments(tokenize(source)));\n\n    let data: Datum[] = [];\n    while (parser.tokens.length) {\n      data.push(parser.parseDatum());\n    }\n\n    return data;\n  }\n\n  static parseToDatum(source: string): Datum {\n    return new Parser(discardComments(tokenize(source))).parseDatum();\n  }\n\n  constructor(private tokens: Token[]) {}\n\n  parseDatumOrComment(): Datum | Comment {\n    const next = this.tokens[0];\n    if (isComment(next)) {\n      this.tokens.shift();\n      return next;\n    }\n    return this.parseDatum();\n  }\n\n  parseDatum(): Datum {\n    const next = this.tokens[0];\n    if (next === undefined) throw \"expected datum, but found end of input\";\n\n    switch (next) {\n      case \"(\":\n        this.eat(\"(\");\n        const list = this.parseList();\n        this.eat(\")\");\n        return list;\n      case \")\":\n        throw \"extraneous ')'\";\n      case \"#t\":\n      case \"#f\":\n        this.tokens.shift();\n        return { kind: \"Boolean\", value: next === \"#t\" };\n      case \".\":\n        throw `misplaced '.'`;\n      default:\n        this.tokens.shift();\n        if (typeof next === \"number\") {\n          return { kind: \"Number\", value: next };\n        } else if (\"string\" in next) {\n          return { kind: \"String\", value: next.string };\n        } else if (\"symbol\" in next) {\n          return { kind: \"Symbol\", value: next.symbol };\n        } else {\n          // Comment - should have been thrown away\n          throw \"comment token not allowed in this context\";\n        }\n    }\n  }\n\n  parseList(): ListDatum {\n    let heads: Datum[] = [];\n\n    let next: Token;\n    while ((next = this.tokens[0]!) != \")\") {\n      if (heads.length > 0 && next === \".\") {\n        // (head1 head2 ... headN . tail)\n\n        // eat '.'\n        this.tokens.shift();\n\n        const tail = this.parseDatum();\n\n        return {\n          kind: \"List\",\n          heads,\n          tail,\n        };\n      } else {\n        heads.push(this.parseDatum());\n      }\n    }\n\n    // (head1 head2 ... headN)\n    return {\n      kind: \"List\",\n      heads,\n    };\n  }\n\n  private eat(required: Token): void {\n    if (this.tokens.shift() !== required) throw `expected '${required}'`;\n  }\n}\n\nexport type Comment = {\n  kind: \"comment\";\n  text: string;\n};\n\ntype Token =\n  | \"(\"\n  | \")\"\n  | \"#t\"\n  | \"#f\"\n  | \".\"\n  | number\n  | { string: string }\n  | { symbol: string }\n  | Comment;\n\nfunction tokenize(source: string): Token[] {\n  let tokens: Token[] = [];\n\n  primary: while ((source = source.trimStart())) {\n    if (source.startsWith(\";\")) {\n      source = source.slice(1);\n\n      let text = \"\";\n      while (source.length && !source.startsWith(\"\\n\")) {\n        text += source[0];\n        source = source.slice(1);\n      }\n\n      tokens.push({ kind: \"comment\", text });\n      continue;\n    }\n\n    for (const token of [\"(\", \")\", \".\"] satisfies Token[]) {\n      if (source.startsWith(token)) {\n        source = source.slice(token.length);\n        tokens.push(token);\n        continue primary;\n      }\n    }\n\n    const boolMatch = source.match(/^(#[tf])(?![a-zA-Z!$%&*\\/:<=>?^_~#0-9+\\-\\.@])/);\n    if (boolMatch) {\n      const token = boolMatch[1] as Token & string;\n      source = source.slice(token.length);\n      tokens.push(token);\n      continue primary;\n    }\n\n    if (source.startsWith('\"')) {\n      source = source.slice(1);\n\n      let string = \"\";\n      let char = source[0];\n      let escape = false;\n\n      while (escape || char !== '\"') {\n        if (!source.length) throw \"unterminated string literal\";\n\n        escape = !escape && char === \"\\\\\";\n        if (!escape) {\n          string += char;\n        }\n\n        source = source.slice(1);\n        char = source[0];\n      }\n\n      // Consume ending quotes\n      source = source.slice(1);\n\n      tokens.push({ string });\n      continue;\n    }\n\n    let match = source.match(/^-?(\\d*\\.\\d+|\\d+)([eE][-+]?\\d+)?/);\n    if (match) {\n      const [matchText] = match;\n      source = source.slice(matchText.length);\n      tokens.push(Number(matchText));\n      continue;\n    }\n\n    match = source.match(\n      /^·|[a-zA-Z!$%&*\\/:<=>?^_~#][a-zA-Z!$%&*\\/:<=>?^_~#0-9+\\-\\.@]*|\\+|\\-|\\.\\.\\.|→/,\n    );\n    if (match) {\n      const [symbol] = match;\n      source = source.slice(symbol.length);\n\n      tokens.push({ symbol });\n      continue;\n    }\n\n    throw \"invalid token in source code\";\n  }\n\n  return tokens;\n}\n\nfunction isComment(token: Token | undefined): token is Comment {\n  return typeof token === \"object\" && \"kind\" in token && token.kind === \"comment\";\n}\n\nfunction discardComments(tokens: Token[]): Token[] {\n  return tokens.filter((token) => !isComment(token));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}