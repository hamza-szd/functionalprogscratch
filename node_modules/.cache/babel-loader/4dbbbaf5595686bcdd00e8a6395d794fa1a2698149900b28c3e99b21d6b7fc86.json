{"ast":null,"code":"import{keyBy,multiply,reduce,repeat,sumBy}from\"lodash\";import{getVariadic,listValueAsVector,valueAsBool,valueIsDatum}from\"../../evaluator/value\";import{extendIndexPath}from\"../trees/tree\";import{Parser}from\"../../expr/parse\";import{flattenDatum}from\"../../datum/flattened\";import{DynamicTypeAny}from\"../../evaluator/dynamic-type\";import{datumEqual}from\"../../datum/equality\";import{SparkgroundComponent}from\"../../evaluator/component\";export function makeEnv(bindings){return keyBy(bindings,binding=>binding.name);}export function mergeEnvs(){for(var _len=arguments.length,environments=new Array(_len),_key=0;_key<_len;_key++){environments[_key]=arguments[_key];}return Object.assign({},...environments);}export function extendEnv(environment,parentIndexPath,varSlots){return mergeEnvs(environment,makeEnv(varSlots.filter(slot=>slot.kind===\"name-binding\").map((slot,index)=>({name:slot.id,cell:{},attributes:{typeAnnotation:slot.type,binder:extendIndexPath(parentIndexPath,index)}}))));}// TODO: Move this\nfunction chainCompare(items,compare){if(items.length===0)return true;let prev=items[0];let satisfied=true;for(let i=1;i<items.length&&satisfied;i++){const cur=items[i];if(compare(prev,cur))prev=cur;else satisfied=false;}return satisfied;}// https://conservatory.scheme.org/schemers/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_chap_6\nexport const SchemeReportEnvironment=makeEnv([{name:\"apply\",cell:{value:{kind:\"fn\",signature:[{name:\"function\",type:\"fn\"},{name:\"args\",type:\"List\"}],*body(args,evaluator){const[fn,argList]=args;const argv=listValueAsVector(argList);if(!argv){throw{tag:\"ImproperList\",functionName:\"apply\",argValue:argList};}return yield*evaluator.call(fn,argv);}}},attributes:{doc:\"Calls `function` with the elements of `args` as arguments.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function\",of:[{tag:\"Function*\",of:[{tag:\"Any\"},{var:\"Out\"}]},{tag:\"List\",of:[{tag:\"Any\"}]},{var:\"Out\"}]}}}},{name:\"map\",cell:{value:{kind:\"fn\",signature:[{name:\"function\",type:\"fn\"},{name:\"lists\",type:\"List\",variadic:true}],*body(args,evaluator){const[fn]=args;const lists=getVariadic(1,args);if(!lists.length)return{kind:\"List\",heads:[]};const vectors=lists.map(listValueAsVector);const invalidIndex=vectors.findIndex(vector=>vector===undefined);if(invalidIndex!==-1){throw{tag:\"ImproperList\",functionName:\"map\",argValue:lists[invalidIndex]};}const rows=vectors;const width=vectors[0].length;let results=[];for(let i=0;i<width;i++){const tentativeCol=rows.map(row=>row[i]);if(tentativeCol.some(entry=>entry===undefined)){throw\"lists passed to 'map' have different length\";}const col=tentativeCol;results.push(yield*evaluator.call(fn,col));}return{kind:\"List\",heads:results};}}},attributes:{doc:\"Applies `function` to each element of `list`, and returns the results as a new list.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"},{kind:\"type-name-binding\",id:\"NewElement\"}],body:{tag:\"Function\",of:[{tag:\"Function\",of:[{var:\"Element\"},{var:\"NewElement\"}]},{tag:\"List\",of:[{var:\"Element\"}]},{tag:\"List\",of:[{var:\"NewElement\"}]}]}}}},{name:\"eval\",cell:{value:{kind:\"fn\",signature:[{name:\"expression\"},{name:\"environment\"}],*body(args,evaluator){var _evaluator$eval;const[expression,env]=args;if(!valueIsDatum(expression)){throw\"expression passed to 'eval' must be serializable (Boolean/Number/String/Symbol/List)\";}let expressionDatum;if(expression.kind===\"List\"){const vector=listValueAsVector(expression);if(vector===undefined){throw{tag:\"ImproperList\",functionName:\"eval\",argValue:expression};}expressionDatum={kind:\"List\",heads:vector};}else{expressionDatum=expression;}// TODO: Use env (what should be the runtime representation?)\nreturn yield*(_evaluator$eval=evaluator.eval({expr:new Parser().parsePrimary(flattenDatum(expressionDatum))}))!==null&&_evaluator$eval!==void 0?_evaluator$eval:{kind:\"List\",heads:[]};}}},attributes:{doc:\"Evaluates `expression`, using the bindings in `environment` for name resolution.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Any\"},{tag:\"Any\"}]}}},{name:\"not\",cell:{value:{kind:\"fn\",signature:[{name:\"value\"}],*body(args){const[value]=args;return{kind:\"Boolean\",value:!valueAsBool(value)};}}},attributes:{doc:\"Logically negates `value`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"boolean?\",cell:{value:{kind:\"fn\",signature:[{name:\"obj\"}],*body(args){const[obj]=args;return{kind:\"Boolean\",value:obj.kind===\"Boolean\"};}}},attributes:{doc:\"Determines whether `obj` is a boolean (true or false) value.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"symbol?\",cell:{value:{kind:\"fn\",signature:[{name:\"obj\"}],*body(args){const[obj]=args;return{kind:\"Boolean\",value:obj.kind===\"Symbol\"};}}},attributes:{doc:\"Determines whether `obj` is a symbol value.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"number?\",cell:{value:{kind:\"fn\",signature:[{name:\"obj\"}],*body(args){const[obj]=args;return{kind:\"Boolean\",value:obj.kind===\"Number\"};}}},attributes:{doc:\"Determines whether `obj` is a number value.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"string?\",cell:{value:{kind:\"fn\",signature:[{name:\"obj\"}],*body(args){const[obj]=args;return{kind:\"Boolean\",value:obj.kind===\"String\"};}}},attributes:{doc:\"Determines whether `obj` is a string value.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"list?\",cell:{value:{kind:\"fn\",signature:[{name:\"obj\"}],*body(args){const[obj]=args;return{kind:\"Boolean\",value:obj.kind===\"List\"};}}},attributes:{doc:\"Determines whether `obj` is a list value.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"procedure?\",cell:{value:{kind:\"fn\",signature:[{name:\"obj\"}],*body(args){const[obj]=args;return{kind:\"Boolean\",value:obj.kind===\"fn\"};}}},attributes:{doc:\"Determines whether `obj` is a procedure (function) value.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"string->number\",cell:{value:{kind:\"fn\",signature:[{name:\"string\",type:\"String\"}],*body(args){const[string]=args;return{kind:\"Number\",value:Number.parseInt(string.value)};}}},attributes:{doc:\"Parses a number value from `string`, in base ten\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"Number\"}]}}},{name:\"number->string\",cell:{value:{kind:\"fn\",signature:[{name:\"number\",type:\"Number\"}],*body(args){const[number]=args;return{kind:\"String\",value:new Number(number.value).toString()};}}},attributes:{doc:\"Writes `number` as a string, in base ten.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"String\"}]}}},{name:\"string->symbol\",cell:{value:{kind:\"fn\",signature:[{name:\"name\",type:\"String\"}],*body(args){const[name]=args;return{kind:\"Symbol\",value:name.value};}}},attributes:{doc:\"Returns the unique symbol with the given `name`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"Symbol\"}]}}},{name:\"symbol->string\",cell:{value:{kind:\"fn\",signature:[{name:\"symbol\",type:\"Symbol\"}],*body(args){const[name]=args;return{kind:\"String\",value:name.value};}}},attributes:{doc:\"Returns the name of `symbol` as a string.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Symbol\"},{tag:\"String\"}]}}},{name:\"+\",cell:{value:{kind:\"fn\",signature:[{name:\"numbers\",type:\"Number\",variadic:true}],*body(args){const numbers=getVariadic(0,args);return{kind:\"Number\",value:sumBy(numbers,_ref=>{let{value}=_ref;return value;})};}}},attributes:{doc:\"Adds `numbers`. If given no numbers, the result is 0.\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"Number\"},{tag:\"Number\"}]},infix:true}},{name:\"-\",cell:{value:{kind:\"fn\",signature:[{name:\"number\",type:\"Number\"},{name:\"numbers\",type:\"Number\",variadic:true}],*body(args){const[number]=args;const numbers=getVariadic(1,args);return{kind:\"Number\",value:numbers.length?number.value-sumBy(numbers,_ref2=>{let{value}=_ref2;return value;}):-number.value};}}},attributes:{doc:\"If given at least two arguments, subtracts the sum of all subsequent `numbers` from the first one. If given only one argument, subtracts `number` from 0 (acting as unary minus).\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"Number\"},{tag:\"Number\"}],minArgCount:1},infix:true}},{name:\"*\",cell:{value:{kind:\"fn\",signature:[{name:\"numbers\",type:\"Number\",variadic:true}],*body(args){const numbers=getVariadic(0,args);return{kind:\"Number\",value:reduce(numbers.map(_ref3=>{let{value}=_ref3;return value;}),multiply,1)};}}},attributes:{doc:\"Multiplies `numbers`. If given no numbers, the result is 1.\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"Number\"},{tag:\"Number\"}]},infix:true}},{name:\"/\",cell:{value:{kind:\"fn\",signature:[{name:\"number\",type:\"Number\"},{name:\"numbers\",type:\"Number\",variadic:true}],*body(args){const[number]=args;const numbers=getVariadic(1,args);return{kind:\"Number\",value:numbers.length?number.value/reduce(numbers.map(_ref4=>{let{value}=_ref4;return value;}),multiply,1):1/number.value};}}},attributes:{doc:\"If given at least two arguments, divides the first `number` by the product of all subsequent ones. If given only one argument, divides 1 by `number` (acting as reciprocal).\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"Number\"},{tag:\"Number\"}],minArgCount:1},infix:true}},{name:\"mod\",cell:{value:{kind:\"fn\",signature:[{name:\"dividend\",type:\"Number\"},{name:\"divisor\",type:\"Number\"}],*body(args){const[dividend,divisor]=args;return{kind:\"Number\",value:dividend.value%divisor.value};}}},attributes:{doc:\"Computes the (positive or negative) remainder of dividing `dividend` by `divisor`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"},{tag:\"Number\"}]},infix:true}},{name:\"abs\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"}],*body(args){const[x]=args;return{kind:\"Number\",value:Math.abs(x.value)};}}},attributes:{doc:\"Computes the absolute value of `x`, which is `x` without any negative sign.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"floor\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"}],*body(args){const[x]=args;return{kind:\"Number\",value:Math.floor(x.value)};}}},attributes:{doc:\"Computes the floor of `x`, which is the greatest integer that is less than or equal to `x`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Integer\"}]}}},{name:\"ceiling\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"}],*body(args){const[x]=args;return{kind:\"Number\",value:Math.ceil(x.value)};}}},attributes:{doc:\"Computes the ceiling of `x`, which is the least integer that is greater than or equal to `x`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Integer\"}]}}},{name:\"round\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"}],*body(args){const[x]=args;return{kind:\"Number\",value:Math.round(x.value)};}}},attributes:{doc:\"Rounds `x` to the nearest integer, breaking ties by rounding toward positive infinity.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Integer\"}]}}},{name:\"truncate\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"}],*body(args){const[x]=args;return{kind:\"Number\",value:Math.trunc(x.value)};}}},attributes:{doc:\"Returns the integer part of `x`, discarding any fractional part.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Integer\"}]}}},{name:\"exp\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"}],*body(args){const[x]=args;return{kind:\"Number\",value:Math.exp(x.value)};}}},attributes:{doc:\"Computes the natural exponential function (base e, Euler's number) at `x`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"log\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"}],*body(args){const[x]=args;return{kind:\"Number\",value:Math.log(x.value)};}}},attributes:{doc:\"Computes the natural logarithm (base e, Euler's number) of `x`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"^\",cell:{value:{kind:\"fn\",signature:[{name:\"base\",type:\"Number\"},{name:\"exponent\",type:\"Number\"}],*body(args){const[base,exponent]=args;return{kind:\"Number\",value:Math.pow(base.value,exponent.value)};}}},attributes:{doc:\"Computes `base` raised to the power `exponent`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"},{tag:\"Number\"}]},infix:true}},{name:\"sin\",cell:{value:{kind:\"fn\",signature:[{name:\"angle\",type:\"Number\"}],*body(args){const[angle]=args;return{kind:\"Number\",value:Math.sin(angle.value)};}}},attributes:{doc:\"Computes the sine of `angle` in radians.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"cos\",cell:{value:{kind:\"fn\",signature:[{name:\"angle\",type:\"Number\"}],*body(args){const[angle]=args;return{kind:\"Number\",value:Math.cos(angle.value)};}}},attributes:{doc:\"Computes the cosine of `angle` in radians.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"tan\",cell:{value:{kind:\"fn\",signature:[{name:\"angle\",type:\"Number\"}],*body(args){const[angle]=args;return{kind:\"Number\",value:Math.tan(angle.value)};}}},attributes:{doc:\"Computes the tangent of `angle` in radians.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"asin\",cell:{value:{kind:\"fn\",signature:[{name:\"ratio\",type:\"Number\"}],*body(args){const[ratio]=args;return{kind:\"Number\",value:Math.asin(ratio.value)};}}},attributes:{doc:\"Computes the arcsine of `ratio` in radians.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"acos\",cell:{value:{kind:\"fn\",signature:[{name:\"ratio\",type:\"Number\"}],*body(args){const[ratio]=args;return{kind:\"Number\",value:Math.acos(ratio.value)};}}},attributes:{doc:\"Computes the arc cosine of `ratio` in radians.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"atan\",cell:{value:{kind:\"fn\",signature:[{name:\"ratio\",type:\"Number\"}],*body(args){const[ratio]=args;return{kind:\"Number\",value:Math.atan(ratio.value)};}}},attributes:{doc:\"Computes the arctangent of `ratio` in radians.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"sqrt\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"}],*body(args){const[x]=args;return{kind:\"Number\",value:Math.sqrt(x.value)};}}},attributes:{doc:\"Computes the (principal) square root of `x`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"}]}}},{name:\"=\",cell:{value:{kind:\"fn\",signature:[{name:\"numbers\",type:\"Number\",variadic:true}],*body(args){const numbers=getVariadic(0,args);return{kind:\"Boolean\",value:chainCompare(numbers,(item1,item2)=>item1.value===item2.value)};}}},attributes:{doc:\"Determines whether `numbers` are all equal to each other.\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"Number\"},{tag:\"Boolean\"}]},infix:true}},{name:\"<\",cell:{value:{kind:\"fn\",signature:[{name:\"numbers\",type:\"Number\",variadic:true}],*body(args){const numbers=getVariadic(0,args);return{kind:\"Boolean\",value:chainCompare(numbers,(item1,item2)=>item1.value<item2.value)};}}},attributes:{doc:\"Determines whether `numbers` are in strictly increasing order.\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"Number\"},{tag:\"Boolean\"}]},infix:true}},{name:\">\",cell:{value:{kind:\"fn\",signature:[{name:\"numbers\",type:\"Number\",variadic:true}],*body(args){const numbers=getVariadic(0,args);return{kind:\"Boolean\",value:chainCompare(numbers,(item1,item2)=>item1.value>item2.value)};}}},attributes:{doc:\"Determines whether `numbers` are in strictly decreasing order.\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"Number\"},{tag:\"Boolean\"}]},infix:true}},{name:\"<=\",cell:{value:{kind:\"fn\",signature:[{name:\"numbers\",type:\"Number\",variadic:true}],*body(args){const numbers=getVariadic(0,args);return{kind:\"Boolean\",value:chainCompare(numbers,(item1,item2)=>item1.value<=item2.value)};}}},attributes:{doc:\"Determines whether `numbers` are in (non-strictly) increasing order.\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"Number\"},{tag:\"Boolean\"}]},infix:true}},{name:\">=\",cell:{value:{kind:\"fn\",signature:[{name:\"numbers\",type:\"Number\",variadic:true}],*body(args){const numbers=getVariadic(0,args);return{kind:\"Boolean\",value:chainCompare(numbers,(item1,item2)=>item1.value>=item2.value)};}}},attributes:{doc:\"Determines whether `numbers` are in (non-strictly) decreasing order.\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"Number\"},{tag:\"Boolean\"}]},infix:true}},{name:\"zero?\",cell:{value:{kind:\"fn\",signature:[{name:\"x\"}],*body(args){const[x]=args;return{kind:\"Boolean\",value:x.kind===\"Number\"&&x.value===0};}}},attributes:{doc:\"Determines whether `x` has value 0.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"positive?\",cell:{value:{kind:\"fn\",signature:[{name:\"x\"}],*body(args){const[x]=args;return{kind:\"Boolean\",value:x.kind===\"Number\"&&x.value>0};}}},attributes:{doc:\"Determines whether `x` has positive numeric value.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"negative?\",cell:{value:{kind:\"fn\",signature:[{name:\"x\"}],*body(args){const[x]=args;return{kind:\"Boolean\",value:x.kind===\"Number\"&&x.value<0};}}},attributes:{doc:\"Determines whether `x` has negative numeric value.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"integer?\",cell:{value:{kind:\"fn\",signature:[{name:\"x\"}],*body(args){const[x]=args;return{kind:\"Boolean\",value:x.kind===\"Number\"&&Math.floor(x.value)===Math.ceil(x.value)};}}},attributes:{doc:\"Determines whether `x` is an integer; that is, a numeric value without any fractional part.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"cons\",cell:{value:{kind:\"fn\",signature:[{name:\"first\"},{name:\"rest\",type:\"List\"}],*body(args){const[head,tail]=args;return{kind:\"List\",heads:[head],tail};}}},attributes:{doc:\"Constructs a new list with `first` as the first element and `rest` as the remaining elements.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function\",of:[{var:\"Element\"},{tag:\"List\",of:[{var:\"Element\"}]},{tag:\"List\",of:[{var:\"Element\"}]}]}}}},{name:\"list\",cell:{value:{kind:\"fn\",signature:[{name:\"elements\",variadic:true}],*body(args){const elements=getVariadic(0,args);return{kind:\"List\",heads:elements};}}},attributes:{doc:\"Constructs a list from the given `elements`.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function*\",of:[{var:\"Element\"},{tag:\"List\",of:[{var:\"Element\"}]}]}}}},{name:\"concatenate\",cell:{value:{kind:\"fn\",signature:[{name:\"lists\",type:\"List\",variadic:true}],*body(args){const lists=getVariadic(0,args);const vecs=lists.map(listValueAsVector).filter(x=>x);if(vecs.length!==lists.length){const invalidIndex=lists.map(listValueAsVector).findIndex(x=>!x);throw{tag:\"ImproperList\",functionName:\"concatenate\",argValue:lists[invalidIndex]};}return{kind:\"List\",heads:vecs.flat(1)};}}},attributes:{doc:\"Constructs a list consisting of the given `lists` concatenated together.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function*\",of:[{tag:\"List\",of:[{var:\"Element\"}]},{tag:\"List\",of:[{var:\"Element\"}]}]}}}},{name:\"reverse\",cell:{value:{kind:\"fn\",signature:[{name:\"list\",type:\"List\"}],*body(args){const[list]=args;const vec=listValueAsVector(list);if(!vec){throw{tag:\"ImproperList\",functionName:\"reverse\",argValue:list};}return{kind:\"List\",heads:[...vec].reverse()};}}},attributes:{doc:\"Constructs a new list consisting of the elements of `list` in reverse order.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function\",of:[{tag:\"List\",of:[{var:\"Element\"}]},{tag:\"List\",of:[{var:\"Element\"}]}]}}}},{name:\"first\",cell:{value:{kind:\"fn\",signature:[{name:\"list\",type:\"List\"}],*body(args){const[list]=args;// TODO: Length check\nreturn list.heads[0];}}},attributes:{doc:\"Returns the first element of `list`.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function\",of:[{tag:\"List\",of:[{var:\"Element\"}]},{var:\"Element\"}]}}}},{name:\"rest\",cell:{value:{kind:\"fn\",signature:[{name:\"list\",type:\"List\"}],*body(args){const[list]=args;if(list.heads.length>1){return{kind:\"List\",heads:[...list.heads.slice(1)],tail:list.tail};}else{var _list$tail;return(_list$tail=list.tail)!==null&&_list$tail!==void 0?_list$tail:{kind:\"List\",heads:[]};}}}},attributes:{doc:\"Returns a copy of `list` with the first element removed.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function\",of:[{tag:\"List\",of:[{var:\"Element\"}]},{tag:\"List\",of:[{var:\"Element\"}]}]}}}},{name:\"empty?\",cell:{value:{kind:\"fn\",signature:[{name:\"obj\"}],*body(args){const[obj]=args;return{kind:\"Boolean\",value:(obj===null||obj===void 0?void 0:obj.kind)===\"List\"&&obj.heads.length===0};}}},attributes:{doc:\"Determines whether `obj` is the empty list.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Any\"},{tag:\"Boolean\"}]}}},{name:\"length\",cell:{value:{kind:\"fn\",signature:[{name:\"list\",type:\"List\"}],*body(args){const[list]=args;const vector=listValueAsVector(list);if(vector===undefined){throw{tag:\"ImproperList\",functionName:\"length\",argValue:list};}return{kind:\"Number\",value:vector.length};}}},attributes:{doc:\"Returns the number of elements in `list`.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function\",of:[{tag:\"List\",of:[{var:\"Element\"}]},{tag:\"Integer\"}]}}}},{name:\"item-at\",cell:{value:{kind:\"fn\",signature:[{name:\"list\",type:\"List\"},{name:\"index\",type:\"Number\"}],*body(args){const[list,index]=args;const vector=listValueAsVector(list);if(vector===undefined){throw{tag:\"ImproperList\",functionName:\"index-of\",argValue:list};}const item=vector[index.value];if(item===undefined){throw{tag:\"IndexOutOfBounds\",list,index:index.value};}return item;}}},attributes:{doc:\"Returns the item at `index` in `list`.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function\",of:[{tag:\"List\",of:[{var:\"Element\"}]},{tag:\"Integer\"},{var:\"Element\"}]}}}},{name:\"index-of\",cell:{value:{kind:\"fn\",signature:[{name:\"list\",type:\"List\"},{name:\"item\"}],*body(args){const[list,item]=args;const vector=listValueAsVector(list);if(vector===undefined){throw{tag:\"ImproperList\",functionName:\"index-of\",argValue:list};}return{kind:\"Number\",value:vector.findIndex(listItem=>datumEqual(listItem,item))};}}},attributes:{doc:\"Returns the first index of `item` in `list`, or -1 if there is no such index.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function\",of:[{tag:\"List\",of:[{var:\"Element\"}]},{var:\"Element\"},{tag:\"Integer\"}]}}}},{name:\"contains?\",cell:{value:{kind:\"fn\",signature:[{name:\"list\",type:\"List\"},{name:\"item\",type:DynamicTypeAny}],*body(args){const[list,item]=args;const vector=listValueAsVector(list);if(vector===undefined){throw{tag:\"ImproperList\",functionName:\"contains?\",argValue:list};}return{kind:\"Boolean\",value:vector.some(listItem=>datumEqual(listItem,item))};}}},attributes:{doc:\"Determines whether `item` is in `list`.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"Element\"}],body:{tag:\"Function\",of:[{tag:\"List\",of:[{var:\"Element\"}]},{var:\"Element\"},{tag:\"Boolean\"}]}}}},{name:\"string-concatenate\",cell:{value:{kind:\"fn\",signature:[{name:\"strings\",type:\"String\",variadic:true}],*body(args){const strings=getVariadic(0,args);return{kind:\"String\",value:strings.map(_ref5=>{let{value}=_ref5;return value;}).reduce((acc,s)=>acc+s)};}}},attributes:{doc:\"Concatenates the given `strings` together, in order.\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"String\"},{tag:\"String\"}]}}},{name:\"string-repeat\",cell:{value:{kind:\"fn\",signature:[{name:\"string\",type:\"String\"},{name:\"count\",type:\"Number\"}],*body(args){const[string,count]=args;return{kind:\"String\",value:repeat(string.value,count.value)};}}},attributes:{doc:\"Creates a new string consisting of `count` copies of `string`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"Integer\"},{tag:\"String\"}]}}},{name:\"string-length\",cell:{value:{kind:\"fn\",signature:[{name:\"string\",type:\"String\"}],*body(args){const[string]=args;return{kind:\"Number\",value:string.value.length};}}},attributes:{doc:\"Returns the number of characters in `string`.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"Integer\"}]}}},{name:\"string-slice\",cell:{value:{kind:\"fn\",signature:[{name:\"string\",type:\"String\"},{name:\"start\",type:\"Number\",optional:true},{name:\"end\",type:\"Number\",optional:true}],*body(args){const[string,start,end]=args;const startIdx=start?start.value:undefined;const endIdx=end?end.value:undefined;return{kind:\"String\",value:string.value.slice(startIdx,endIdx)};}}},attributes:{doc:\"Returns the characters in `string` from `start` (inclusive) to `end` (exclusive). If not given, `start` is 0, and `end` is the length of `string`.\",typeAnnotation:{tag:\"Function*\",of:[{tag:\"String\"},{tag:\"Integer\"},{tag:\"String\"}],minArgCount:1,maxArgCount:3}}},{name:\"string-character-at\",cell:{value:{kind:\"fn\",signature:[{name:\"string\",type:\"String\"},{name:\"index\",type:\"Number\"}],*body(args){const[string,index]=args;const char=string.value.at(index.value);return{kind:\"String\",value:char!==null&&char!==void 0?char:\"\"};}}},attributes:{doc:\"Returns the character in `string` at `index`. If there is no such character, returns the empty string.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"Integer\"},{tag:\"String\"}]}}},{name:\"string=?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value===string2.value};}}},attributes:{doc:\"Determines whether `string1` and `string2` are equal; that is, they have exactly the same characters in exactly the same order.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"string<?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value<string2.value};}}},attributes:{doc:\"Determines whether `string1` compares less than `string2` in lexicographic (dictionary) order.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"string>?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value>string2.value};}}},attributes:{doc:\"Determines whether `string1` compares greater than `string2` in lexicographic (dictionary) order.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"string<=?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value<=string2.value};}}},attributes:{doc:\"Determines whether `string1` compares less than or equal to `string2` in lexicographic (dictionary) order.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"string>=?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value>=string2.value};}}},attributes:{doc:\"Determines whether `string1` compares greater than or equal to `string2` in lexicographic (dictionary) order.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"string-ci=?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value.localeCompare(string2.value,undefined,{sensitivity:\"accent\"})===0};}}},attributes:{doc:\"Determines whether `string1` and `string2` are equal, ignoring letter case; that is, they have the same characters (ignoring letter case) in exactly the same order.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"string-ci<?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value.localeCompare(string2.value,undefined,{sensitivity:\"accent\"})<0};}}},attributes:{doc:\"Determines whether `string1` compares less than `string2` in lexicographic (dictionary) order, ignoring letter case.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"string-ci>?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value.localeCompare(string2.value,undefined,{sensitivity:\"accent\"})>0};}}},attributes:{doc:\"Determines whether `string1` compares greater than `string2` in lexicographic (dictionary) order, ignoring letter case.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"string-ci<=?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value.localeCompare(string2.value,undefined,{sensitivity:\"accent\"})<=0};}}},attributes:{doc:\"Determines whether `string1` compares less than or equal to `string2` in lexicographic (dictionary) order, ignoring letter case.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"string-ci>=?\",cell:{value:{kind:\"fn\",signature:[{name:\"string1\",type:\"String\"},{name:\"string2\",type:\"String\"}],*body(args){const[string1,string2]=args;return{kind:\"Boolean\",value:string1.value.localeCompare(string2.value,undefined,{sensitivity:\"accent\"})>=0};}}},attributes:{doc:\"Determines whether `string1` compares greater than or equal to `string2` in lexicographic (dictionary) order, ignoring letter case.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"String\"},{tag:\"Boolean\"}]}}},{name:\"ellipse\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"},{name:\"y\",type:\"Number\"},{name:\"x-radius\",type:\"Number\"},{name:\"y-radius\",type:\"Number\"},{name:\"color\",type:\"String\"}],*body(args){const[x,y,xRadius,yRadius,color]=args;return{kind:\"List\",heads:[{kind:\"Symbol\",value:\"ellipse\"},x,y,xRadius,yRadius,color]};}}},attributes:{doc:\"Makes an ellipse graphic.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"},{tag:\"Number\"},{tag:\"Number\"},{tag:\"String\"},{tag:\"Graphic\"}]}}},{name:\"rectangle\",cell:{value:{kind:\"fn\",signature:[{name:\"x\",type:\"Number\"},{name:\"y\",type:\"Number\"},{name:\"width\",type:\"Number\"},{name:\"height\",type:\"Number\"},{name:\"color\",type:\"String\"}],*body(args){const[x,y,width,height,color]=args;return{kind:\"List\",heads:[{kind:\"Symbol\",value:\"rectangle\"},x,y,width,height,color]};}}},attributes:{doc:\"Makes a rectangle graphic.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"Number\"},{tag:\"Number\"},{tag:\"Number\"},{tag:\"Number\"},{tag:\"String\"},{tag:\"Graphic\"}]}}},{name:\"image\",cell:{value:{kind:\"fn\",signature:[{name:\"url\",type:\"String\"},{name:\"x\",type:\"Number\"},{name:\"y\",type:\"Number\"}],*body(args){const[url,x,y]=args;return{kind:\"List\",heads:[{kind:\"Symbol\",value:\"image\"},url,x,y]};}}},attributes:{doc:\"Makes an image graphic.\",typeAnnotation:{tag:\"Function\",of:[{tag:\"String\"},{tag:\"Number\"},{tag:\"Number\"},{tag:\"Graphic\"}]}}},{name:\"component\",cell:{value:{kind:\"fn\",signature:[{name:\"initial-state\"}],*body(args,evaluator){const[initialState]=args;return SparkgroundComponent.create(initialState,evaluator);}}},attributes:{doc:\"Defines a new component.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"State\"}],body:{tag:\"Function\",of:[{var:\"State\"},{tag:\"Component\",of:[{var:\"State\"}]}]}},headingArgCount:1}},{name:\"to-draw\",cell:{value:{kind:\"fn\",signature:[{name:\"component\",type:\"component\"},{name:\"draw-function\",type:\"fn\"}],*body(args,evaluator){const[componentValue,drawFn]=args;const compnoent=componentValue.component;compnoent.toDraw=state=>evaluator.call(drawFn,[state]);return{kind:\"List\",heads:[]};}}},attributes:{doc:\"Describes how `component` is drawn to the screen.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"State\"}],body:{tag:\"Function\",of:[{tag:\"Component\",of:[{var:\"State\"}]},{tag:\"Function\",of:[{var:\"State\"},{tag:\"Graphic\"}]},{tag:\"Empty\"}]}},headingArgCount:1,hat:true}},{name:\"on-tick\",cell:{value:{kind:\"fn\",signature:[{name:\"component\",type:\"component\"},{name:\"tick-function\",type:\"fn\"}],*body(args,evaluator){const[componentValue,tickFn]=args;const compnoent=componentValue.component;compnoent.onTick=state=>evaluator.call(tickFn,[state]);return{kind:\"List\",heads:[]};}}},attributes:{doc:\"Describes how `component` changes state after each tick of Sparkground's internal clock (1/60 of a second).\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"State\"}],body:{tag:\"Function\",of:[{tag:\"Component\",of:[{var:\"State\"}]},{tag:\"Function\",of:[{var:\"State\"},{var:\"State\"}]},{tag:\"Empty\"}]}},headingArgCount:1,hat:true}},{name:\"on-key\",cell:{value:{kind:\"fn\",signature:[{name:\"component\",type:\"component\"},{name:\"key-function\",type:\"fn\"}],*body(args,evaluator){const[componentValue,keyFn]=args;const compnoent=componentValue.component;compnoent.onKey=(state,key)=>evaluator.call(keyFn,[state,{kind:\"String\",value:key}]);return{kind:\"List\",heads:[]};}}},attributes:{doc:\"Describes how `component` changes state after a keyboard key is pressed.\",typeAnnotation:{forall:[{kind:\"type-name-binding\",id:\"State\"}],body:{tag:\"Function\",of:[{tag:\"Component\",of:[{var:\"State\"}]},{tag:\"Function\",of:[{var:\"State\"},{tag:\"String\"},{var:\"State\"}]},{tag:\"Empty\"}]}},headingArgCount:1,hat:true}}]);export const ExtensionsEnvironment=makeEnv([{name:\"null\",cell:{value:{kind:\"fn\",signature:[],*body(){return{kind:\"List\",heads:[]};}}}}]);export const InitialEnvironment=mergeEnvs(ExtensionsEnvironment,SchemeReportEnvironment);","map":{"version":3,"names":["keyBy","multiply","reduce","repeat","sumBy","getVariadic","listValueAsVector","valueAsBool","valueIsDatum","extendIndexPath","Parser","flattenDatum","DynamicTypeAny","datumEqual","SparkgroundComponent","makeEnv","bindings","binding","name","mergeEnvs","_len","arguments","length","environments","Array","_key","Object","assign","extendEnv","environment","parentIndexPath","varSlots","filter","slot","kind","map","index","id","cell","attributes","typeAnnotation","type","binder","chainCompare","items","compare","prev","satisfied","i","cur","SchemeReportEnvironment","value","signature","body","args","evaluator","fn","argList","argv","tag","functionName","argValue","call","doc","forall","of","var","variadic","lists","heads","vectors","invalidIndex","findIndex","vector","undefined","rows","width","results","tentativeCol","row","some","entry","col","push","_evaluator$eval","expression","env","expressionDatum","eval","expr","parsePrimary","obj","string","Number","parseInt","number","toString","numbers","_ref","infix","_ref2","minArgCount","_ref3","_ref4","dividend","divisor","x","Math","abs","floor","ceil","round","trunc","exp","log","base","exponent","pow","angle","sin","cos","tan","ratio","asin","acos","atan","sqrt","item1","item2","head","tail","elements","vecs","flat","list","vec","reverse","slice","_list$tail","item","listItem","strings","_ref5","acc","s","count","optional","start","end","startIdx","endIdx","maxArgCount","char","at","string1","string2","localeCompare","sensitivity","y","xRadius","yRadius","color","height","url","initialState","create","headingArgCount","componentValue","drawFn","compnoent","component","toDraw","state","hat","tickFn","onTick","keyFn","onKey","key","ExtensionsEnvironment","InitialEnvironment"],"sources":["/Users/hamzashahzad/Desktop/resume_projects/sparkground/src/editor/library/environments.ts"],"sourcesContent":["import { keyBy, multiply, reduce, repeat, sumBy } from \"lodash\";\nimport { Datum, ListDatum, NumberDatum, StringDatum, SymbolDatum } from \"../../datum/datum\";\nimport {\n  ComponentValue,\n  FnValue,\n  ListValue,\n  Value,\n  getVariadic,\n  listValueAsVector,\n  valueAsBool,\n  valueIsDatum,\n} from \"../../evaluator/value\";\nimport { Type } from \"../../typechecker/type\";\nimport { TreeIndexPath, extendIndexPath } from \"../trees/tree\";\nimport { NameBinding, VarSlot } from \"../../expr/expr\";\nimport { Parser } from \"../../expr/parse\";\nimport { flattenDatum } from \"../../datum/flattened\";\nimport { DynamicTypeAny } from \"../../evaluator/dynamic-type\";\nimport { datumEqual } from \"../../datum/equality\";\nimport { SparkgroundComponent } from \"../../evaluator/component\";\nimport { ImproperList, IndexOutOfBounds } from \"../../evaluator/errors\";\nimport { EvalStateGenerator } from \"../../evaluator/evaluate\";\n\nexport type Cell<Domain> = {\n  value?: Domain;\n};\n\nexport type Binding<Domain> = {\n  name: string;\n  cell: Cell<Domain>;\n  attributes?: BindingAttributes;\n};\n\nexport type BindingAttributes = {\n  typeAnnotation?: Type;\n  binder?: TreeIndexPath;\n  doc?: string;\n\n  headingArgCount?: number;\n  bodyArgHints?: string[];\n  hat?: boolean;\n  infix?: boolean;\n};\n\nexport type Environment<Domain = Value> = Record<string, Binding<Domain>>;\n\nexport function makeEnv<Domain = Value>(bindings: Binding<Domain>[]): Environment<Domain> {\n  return keyBy(bindings, (binding) => binding.name);\n}\nexport function mergeEnvs<Domain = Value>(\n  ...environments: Environment<Domain>[]\n): Environment<Domain> {\n  return Object.assign({}, ...environments);\n}\n\nexport function extendEnv<Domain = Value>(\n  environment: Environment<Domain>,\n  parentIndexPath: TreeIndexPath,\n  varSlots: VarSlot[],\n) {\n  return mergeEnvs(\n    environment,\n    makeEnv(\n      varSlots\n        .filter((slot) => slot.kind === \"name-binding\")\n        .map(\n          (slot, index): Binding<Domain> => ({\n            name: (slot as NameBinding).id,\n            cell: {},\n            attributes: {\n              typeAnnotation: (slot as NameBinding).type,\n              binder: extendIndexPath(parentIndexPath, index),\n            },\n          }),\n        ),\n    ),\n  );\n}\n\n// TODO: Move this\nfunction chainCompare<Item>(\n  items: Item[],\n  compare: (item1: Item, item2: Item) => boolean,\n): boolean {\n  if (items.length === 0) return true;\n\n  let prev = items[0]!;\n  let satisfied = true;\n  for (let i = 1; i < items.length && satisfied; i++) {\n    const cur = items[i]!;\n    if (compare(prev, cur)) prev = cur;\n    else satisfied = false;\n  }\n\n  return satisfied;\n}\n\n// https://conservatory.scheme.org/schemers/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_chap_6\nexport const SchemeReportEnvironment: Environment = makeEnv([\n  {\n    name: \"apply\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          {\n            name: \"function\",\n            type: \"fn\",\n          },\n          {\n            name: \"args\",\n            type: \"List\",\n          },\n        ],\n        *body(args, evaluator): EvalStateGenerator {\n          const [fn, argList] = args as [FnValue, ListValue];\n\n          const argv = listValueAsVector(argList);\n          if (!argv) {\n            throw {\n              tag: \"ImproperList\",\n              functionName: \"apply\",\n              argValue: argList,\n            } satisfies ImproperList;\n          }\n\n          return yield* evaluator.call(fn, argv);\n        },\n      },\n    },\n    attributes: {\n      doc: \"Calls `function` with the elements of `args` as arguments.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function\",\n          of: [\n            { tag: \"Function*\", of: [{ tag: \"Any\" }, { var: \"Out\" }] },\n            { tag: \"List\", of: [{ tag: \"Any\" }] },\n            { var: \"Out\" },\n          ],\n        },\n      },\n    },\n  },\n  {\n    name: \"map\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          {\n            name: \"function\",\n            type: \"fn\",\n          },\n          {\n            name: \"lists\",\n            type: \"List\",\n            variadic: true,\n          },\n        ],\n        *body(args, evaluator): EvalStateGenerator {\n          const [fn] = args as [FnValue];\n          const lists = getVariadic<ListValue>(1, args);\n\n          if (!lists.length) return { kind: \"List\", heads: [] };\n\n          const vectors = lists.map(listValueAsVector);\n          const invalidIndex = vectors.findIndex((vector) => vector === undefined);\n          if (invalidIndex !== -1) {\n            throw {\n              tag: \"ImproperList\",\n              functionName: \"map\",\n              argValue: lists[invalidIndex],\n            } satisfies ImproperList;\n          }\n          const rows = vectors as Value[][];\n\n          const width = vectors[0]!.length;\n          let results: Value[] = [];\n          for (let i = 0; i < width; i++) {\n            const tentativeCol = rows.map((row) => row[i]);\n            if (tentativeCol.some((entry) => entry === undefined)) {\n              throw \"lists passed to 'map' have different length\";\n            }\n            const col = tentativeCol as Value[];\n\n            results.push(yield* evaluator.call(fn, col));\n          }\n\n          return { kind: \"List\", heads: results };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Applies `function` to each element of `list`, and returns the results as a new list.\",\n      typeAnnotation: {\n        forall: [\n          { kind: \"type-name-binding\", id: \"Element\" },\n          { kind: \"type-name-binding\", id: \"NewElement\" },\n        ],\n        body: {\n          tag: \"Function\",\n          of: [\n            { tag: \"Function\", of: [{ var: \"Element\" }, { var: \"NewElement\" }] },\n            { tag: \"List\", of: [{ var: \"Element\" }] },\n            { tag: \"List\", of: [{ var: \"NewElement\" }] },\n          ],\n        },\n      },\n    },\n  },\n  {\n    name: \"eval\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"expression\" }, { name: \"environment\" }],\n        *body(args, evaluator): EvalStateGenerator {\n          const [expression, env] = args as [Value, Value];\n          if (!valueIsDatum(expression)) {\n            throw \"expression passed to 'eval' must be serializable (Boolean/Number/String/Symbol/List)\";\n          }\n\n          let expressionDatum: Datum;\n          if (expression.kind === \"List\") {\n            const vector = listValueAsVector(expression);\n            if (vector === undefined) {\n              throw {\n                tag: \"ImproperList\",\n                functionName: \"eval\",\n                argValue: expression,\n              } satisfies ImproperList;\n            }\n            expressionDatum = { kind: \"List\", heads: vector as Datum[] };\n          } else {\n            expressionDatum = expression;\n          }\n\n          // TODO: Use env (what should be the runtime representation?)\n\n          return yield* evaluator.eval({\n            expr: new Parser().parsePrimary(flattenDatum(expressionDatum)),\n          }) ?? {\n            kind: \"List\",\n            heads: [],\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Evaluates `expression`, using the bindings in `environment` for name resolution.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Any\" }, { tag: \"Any\" }] },\n    },\n  },\n  {\n    name: \"not\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"value\" }],\n        *body(args): EvalStateGenerator {\n          const [value] = args as [Value];\n          return { kind: \"Boolean\", value: !valueAsBool(value) };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Logically negates `value`.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"boolean?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"obj\" }],\n        *body(args): EvalStateGenerator {\n          const [obj] = args as [Value];\n          return { kind: \"Boolean\", value: obj.kind === \"Boolean\" };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `obj` is a boolean (true or false) value.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"symbol?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"obj\" }],\n        *body(args): EvalStateGenerator {\n          const [obj] = args as [Value];\n          return { kind: \"Boolean\", value: obj.kind === \"Symbol\" };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `obj` is a symbol value.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"number?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"obj\" }],\n        *body(args): EvalStateGenerator {\n          const [obj] = args as [Value];\n          return { kind: \"Boolean\", value: obj.kind === \"Number\" };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `obj` is a number value.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"string?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"obj\" }],\n        *body(args): EvalStateGenerator {\n          const [obj] = args as [Value];\n          return { kind: \"Boolean\", value: obj.kind === \"String\" };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `obj` is a string value.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"list?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"obj\" }],\n        *body(args): EvalStateGenerator {\n          const [obj] = args as [Value];\n          return { kind: \"Boolean\", value: obj.kind === \"List\" };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `obj` is a list value.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"procedure?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"obj\" }],\n        *body(args): EvalStateGenerator {\n          const [obj] = args as [Value];\n          return { kind: \"Boolean\", value: obj.kind === \"fn\" };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `obj` is a procedure (function) value.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"string->number\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"string\", type: \"String\" }],\n        *body(args): EvalStateGenerator {\n          const [string] = args as [StringDatum];\n          return { kind: \"Number\", value: Number.parseInt(string.value) };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Parses a number value from `string`, in base ten\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"String\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"number->string\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"number\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [number] = args as [StringDatum];\n          return { kind: \"String\", value: new Number(number.value).toString() };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Writes `number` as a string, in base ten.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"String\" }] },\n    },\n  },\n  {\n    name: \"string->symbol\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"name\", type: \"String\" }],\n        *body(args): EvalStateGenerator {\n          const [name] = args as [StringDatum];\n          return { kind: \"Symbol\", value: name.value };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the unique symbol with the given `name`.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"String\" }, { tag: \"Symbol\" }] },\n    },\n  },\n  {\n    name: \"symbol->string\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"symbol\", type: \"Symbol\" }],\n        *body(args): EvalStateGenerator {\n          const [name] = args as [SymbolDatum];\n          return { kind: \"String\", value: name.value };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the name of `symbol` as a string.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Symbol\" }, { tag: \"String\" }] },\n    },\n  },\n  {\n    name: \"+\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"numbers\", type: \"Number\", variadic: true }],\n        *body(args): EvalStateGenerator {\n          const numbers = getVariadic<NumberDatum>(0, args);\n          return { kind: \"Number\", value: sumBy(numbers, ({ value }) => value) };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Adds `numbers`. If given no numbers, the result is 0.\",\n      typeAnnotation: { tag: \"Function*\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n      infix: true,\n    },\n  },\n  {\n    name: \"-\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"number\", type: \"Number\" },\n          { name: \"numbers\", type: \"Number\", variadic: true },\n        ],\n        *body(args): EvalStateGenerator {\n          const [number] = args as [NumberDatum];\n          const numbers = getVariadic<NumberDatum>(1, args);\n          return {\n            kind: \"Number\",\n            value: numbers.length\n              ? number.value - sumBy(numbers, ({ value }) => value)\n              : -number.value,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"If given at least two arguments, subtracts the sum of all subsequent `numbers` from the first one. If given only one argument, subtracts `number` from 0 (acting as unary minus).\",\n      typeAnnotation: {\n        tag: \"Function*\",\n        of: [{ tag: \"Number\" }, { tag: \"Number\" }],\n        minArgCount: 1,\n      },\n      infix: true,\n    },\n  },\n  {\n    name: \"*\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"numbers\", type: \"Number\", variadic: true }],\n        *body(args): EvalStateGenerator {\n          const numbers = getVariadic<NumberDatum>(0, args);\n          return {\n            kind: \"Number\",\n            value: reduce(\n              numbers.map(({ value }) => value),\n              multiply,\n              1,\n            ),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Multiplies `numbers`. If given no numbers, the result is 1.\",\n      typeAnnotation: { tag: \"Function*\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n      infix: true,\n    },\n  },\n  {\n    name: \"/\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"number\", type: \"Number\" },\n          { name: \"numbers\", type: \"Number\", variadic: true },\n        ],\n        *body(args): EvalStateGenerator {\n          const [number] = args as [NumberDatum];\n          const numbers = getVariadic<NumberDatum>(1, args);\n          return {\n            kind: \"Number\",\n            value: numbers.length\n              ? number.value /\n                reduce(\n                  numbers.map(({ value }) => value),\n                  multiply,\n                  1,\n                )\n              : 1 / number.value,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"If given at least two arguments, divides the first `number` by the product of all subsequent ones. If given only one argument, divides 1 by `number` (acting as reciprocal).\",\n      typeAnnotation: {\n        tag: \"Function*\",\n        of: [{ tag: \"Number\" }, { tag: \"Number\" }],\n        minArgCount: 1,\n      },\n      infix: true,\n    },\n  },\n  {\n    name: \"mod\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"dividend\", type: \"Number\" },\n          { name: \"divisor\", type: \"Number\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [dividend, divisor] = args as [NumberDatum, NumberDatum];\n          return {\n            kind: \"Number\",\n            value: dividend.value % divisor.value,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the (positive or negative) remainder of dividing `dividend` by `divisor`.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"Number\" }, { tag: \"Number\" }, { tag: \"Number\" }],\n      },\n      infix: true,\n    },\n  },\n  {\n    name: \"abs\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.abs(x.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the absolute value of `x`, which is `x` without any negative sign.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"floor\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.floor(x.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the floor of `x`, which is the greatest integer that is less than or equal to `x`.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Integer\" }] },\n    },\n  },\n  {\n    name: \"ceiling\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.ceil(x.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the ceiling of `x`, which is the least integer that is greater than or equal to `x`.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Integer\" }] },\n    },\n  },\n  {\n    name: \"round\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.round(x.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Rounds `x` to the nearest integer, breaking ties by rounding toward positive infinity.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Integer\" }] },\n    },\n  },\n  {\n    name: \"truncate\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.trunc(x.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the integer part of `x`, discarding any fractional part.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Integer\" }] },\n    },\n  },\n  {\n    name: \"exp\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.exp(x.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the natural exponential function (base e, Euler's number) at `x`.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"log\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.log(x.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the natural logarithm (base e, Euler's number) of `x`.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"^\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"base\", type: \"Number\" },\n          { name: \"exponent\", type: \"Number\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [base, exponent] = args as [NumberDatum, NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.pow(base.value, exponent.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes `base` raised to the power `exponent`.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"Number\" }, { tag: \"Number\" }, { tag: \"Number\" }],\n      },\n      infix: true,\n    },\n  },\n  {\n    name: \"sin\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"angle\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [angle] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.sin(angle.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the sine of `angle` in radians.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"cos\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"angle\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [angle] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.cos(angle.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the cosine of `angle` in radians.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"tan\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"angle\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [angle] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.tan(angle.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the tangent of `angle` in radians.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"asin\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"ratio\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [ratio] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.asin(ratio.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the arcsine of `ratio` in radians.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"acos\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"ratio\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [ratio] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.acos(ratio.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the arc cosine of `ratio` in radians.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"atan\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"ratio\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [ratio] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.atan(ratio.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the arctangent of `ratio` in radians.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"sqrt\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\", type: \"Number\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [NumberDatum];\n          return {\n            kind: \"Number\",\n            value: Math.sqrt(x.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Computes the (principal) square root of `x`.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Number\" }, { tag: \"Number\" }] },\n    },\n  },\n  {\n    name: \"=\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"numbers\", type: \"Number\", variadic: true }],\n        *body(args): EvalStateGenerator {\n          const numbers = getVariadic<NumberDatum>(0, args);\n          return {\n            kind: \"Boolean\",\n            value: chainCompare(numbers, (item1, item2) => item1.value === item2.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `numbers` are all equal to each other.\",\n      typeAnnotation: { tag: \"Function*\", of: [{ tag: \"Number\" }, { tag: \"Boolean\" }] },\n      infix: true,\n    },\n  },\n  {\n    name: \"<\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"numbers\", type: \"Number\", variadic: true }],\n        *body(args): EvalStateGenerator {\n          const numbers = getVariadic<NumberDatum>(0, args);\n          return {\n            kind: \"Boolean\",\n            value: chainCompare(numbers, (item1, item2) => item1.value < item2.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `numbers` are in strictly increasing order.\",\n      typeAnnotation: { tag: \"Function*\", of: [{ tag: \"Number\" }, { tag: \"Boolean\" }] },\n      infix: true,\n    },\n  },\n  {\n    name: \">\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"numbers\", type: \"Number\", variadic: true }],\n        *body(args): EvalStateGenerator {\n          const numbers = getVariadic<NumberDatum>(0, args);\n          return {\n            kind: \"Boolean\",\n            value: chainCompare(numbers, (item1, item2) => item1.value > item2.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `numbers` are in strictly decreasing order.\",\n      typeAnnotation: { tag: \"Function*\", of: [{ tag: \"Number\" }, { tag: \"Boolean\" }] },\n      infix: true,\n    },\n  },\n  {\n    name: \"<=\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"numbers\", type: \"Number\", variadic: true }],\n        *body(args): EvalStateGenerator {\n          const numbers = getVariadic<NumberDatum>(0, args);\n          return {\n            kind: \"Boolean\",\n            value: chainCompare(numbers, (item1, item2) => item1.value <= item2.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `numbers` are in (non-strictly) increasing order.\",\n      typeAnnotation: { tag: \"Function*\", of: [{ tag: \"Number\" }, { tag: \"Boolean\" }] },\n      infix: true,\n    },\n  },\n  {\n    name: \">=\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"numbers\", type: \"Number\", variadic: true }],\n        *body(args): EvalStateGenerator {\n          const numbers = getVariadic<NumberDatum>(0, args);\n          return {\n            kind: \"Boolean\",\n            value: chainCompare(numbers, (item1, item2) => item1.value >= item2.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `numbers` are in (non-strictly) decreasing order.\",\n      typeAnnotation: { tag: \"Function*\", of: [{ tag: \"Number\" }, { tag: \"Boolean\" }] },\n      infix: true,\n    },\n  },\n  {\n    name: \"zero?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [Value];\n          return {\n            kind: \"Boolean\",\n            value: x.kind === \"Number\" && x.value === 0,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `x` has value 0.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"positive?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [Value];\n          return {\n            kind: \"Boolean\",\n            value: x.kind === \"Number\" && x.value > 0,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `x` has positive numeric value.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"negative?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [Value];\n          return {\n            kind: \"Boolean\",\n            value: x.kind === \"Number\" && x.value < 0,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `x` has negative numeric value.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"integer?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"x\" }],\n        *body(args): EvalStateGenerator {\n          const [x] = args as [Value];\n          return {\n            kind: \"Boolean\",\n            value: x.kind === \"Number\" && Math.floor(x.value) === Math.ceil(x.value),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `x` is an integer; that is, a numeric value without any fractional part.\",\n      typeAnnotation: { tag: \"Function\", of: [{ tag: \"Any\" }, { tag: \"Boolean\" }] },\n    },\n  },\n  {\n    name: \"cons\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"first\" }, { name: \"rest\", type: \"List\" }],\n        *body(args): EvalStateGenerator<ListValue> {\n          const [head, tail] = args as [Value, Value];\n          return {\n            kind: \"List\",\n            heads: [head],\n            tail,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Constructs a new list with `first` as the first element and `rest` as the remaining elements.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function\",\n          of: [\n            { var: \"Element\" },\n            { tag: \"List\", of: [{ var: \"Element\" }] },\n            { tag: \"List\", of: [{ var: \"Element\" }] },\n          ],\n        },\n      },\n    },\n  },\n  {\n    name: \"list\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"elements\", variadic: true }],\n        *body(args): EvalStateGenerator<ListValue> {\n          const elements = getVariadic(0, args);\n          return {\n            kind: \"List\",\n            heads: elements,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Constructs a list from the given `elements`.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function*\",\n          of: [{ var: \"Element\" }, { tag: \"List\", of: [{ var: \"Element\" }] }],\n        },\n      },\n    },\n  },\n  {\n    name: \"concatenate\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"lists\", type: \"List\", variadic: true }],\n        *body(args): EvalStateGenerator<ListValue> {\n          const lists = getVariadic<ListValue>(0, args);\n\n          const vecs = lists.map(listValueAsVector).filter((x) => x);\n          if (vecs.length !== lists.length) {\n            const invalidIndex = lists.map(listValueAsVector).findIndex((x) => !x);\n            throw {\n              tag: \"ImproperList\",\n              functionName: \"concatenate\",\n              argValue: lists[invalidIndex],\n            } satisfies ImproperList;\n          }\n\n          return { kind: \"List\", heads: (vecs as Value[][]).flat(1) };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Constructs a list consisting of the given `lists` concatenated together.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function*\",\n          of: [\n            { tag: \"List\", of: [{ var: \"Element\" }] },\n            { tag: \"List\", of: [{ var: \"Element\" }] },\n          ],\n        },\n      },\n    },\n  },\n  {\n    name: \"reverse\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"list\", type: \"List\" }],\n        *body(args): EvalStateGenerator<ListValue> {\n          const [list] = args as [ListValue];\n\n          const vec = listValueAsVector(list);\n          if (!vec) {\n            throw {\n              tag: \"ImproperList\",\n              functionName: \"reverse\",\n              argValue: list,\n            } satisfies ImproperList;\n          }\n\n          return { kind: \"List\", heads: [...vec].reverse() };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Constructs a new list consisting of the elements of `list` in reverse order.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function\",\n          of: [\n            { tag: \"List\", of: [{ var: \"Element\" }] },\n            { tag: \"List\", of: [{ var: \"Element\" }] },\n          ],\n        },\n      },\n    },\n  },\n  {\n    name: \"first\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"list\", type: \"List\" }],\n        *body(args): EvalStateGenerator {\n          const [list] = args as [ListDatum];\n          // TODO: Length check\n          return list.heads[0]!;\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the first element of `list`.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function\",\n          of: [{ tag: \"List\", of: [{ var: \"Element\" }] }, { var: \"Element\" }],\n        },\n      },\n    },\n  },\n  {\n    name: \"rest\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"list\", type: \"List\" }],\n        *body(args): EvalStateGenerator {\n          const [list] = args as [ListDatum];\n          if (list.heads.length > 1) {\n            return { kind: \"List\", heads: [...list.heads.slice(1)], tail: list.tail };\n          } else {\n            return list.tail ?? { kind: \"List\", heads: [] };\n          }\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns a copy of `list` with the first element removed.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function\",\n          of: [\n            { tag: \"List\", of: [{ var: \"Element\" }] },\n            { tag: \"List\", of: [{ var: \"Element\" }] },\n          ],\n        },\n      },\n    },\n  },\n  {\n    name: \"empty?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"obj\" }],\n        *body(args): EvalStateGenerator {\n          const [obj] = args;\n          return { kind: \"Boolean\", value: obj?.kind === \"List\" && obj.heads.length === 0 };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `obj` is the empty list.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"Any\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"length\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"list\", type: \"List\" }],\n        *body(args): EvalStateGenerator {\n          const [list] = args as [ListValue];\n\n          const vector = listValueAsVector(list);\n          if (vector === undefined) {\n            throw {\n              tag: \"ImproperList\",\n              functionName: \"length\",\n              argValue: list,\n            } satisfies ImproperList;\n          }\n\n          return { kind: \"Number\", value: vector.length };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the number of elements in `list`.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function\",\n          of: [{ tag: \"List\", of: [{ var: \"Element\" }] }, { tag: \"Integer\" }],\n        },\n      },\n    },\n  },\n  {\n    name: \"item-at\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"list\", type: \"List\" },\n          { name: \"index\", type: \"Number\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [list, index] = args as [ListValue, NumberDatum];\n\n          const vector = listValueAsVector(list);\n          if (vector === undefined) {\n            throw {\n              tag: \"ImproperList\",\n              functionName: \"index-of\",\n              argValue: list,\n            } satisfies ImproperList;\n          }\n\n          const item = vector[index.value];\n          if (item === undefined) {\n            throw { tag: \"IndexOutOfBounds\", list, index: index.value } satisfies IndexOutOfBounds;\n          }\n\n          return item;\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the item at `index` in `list`.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function\",\n          of: [{ tag: \"List\", of: [{ var: \"Element\" }] }, { tag: \"Integer\" }, { var: \"Element\" }],\n        },\n      },\n    },\n  },\n  {\n    name: \"index-of\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"list\", type: \"List\" }, { name: \"item\" }],\n        *body(args): EvalStateGenerator {\n          const [list, item] = args as [ListValue, Value];\n\n          const vector = listValueAsVector(list);\n          if (vector === undefined) {\n            throw {\n              tag: \"ImproperList\",\n              functionName: \"index-of\",\n              argValue: list,\n            } satisfies ImproperList;\n          }\n\n          return {\n            kind: \"Number\",\n            value: vector.findIndex((listItem) => datumEqual(listItem, item)),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the first index of `item` in `list`, or -1 if there is no such index.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function\",\n          of: [{ tag: \"List\", of: [{ var: \"Element\" }] }, { var: \"Element\" }, { tag: \"Integer\" }],\n        },\n      },\n    },\n  },\n  {\n    name: \"contains?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"list\", type: \"List\" },\n          { name: \"item\", type: DynamicTypeAny },\n        ],\n        *body(args): EvalStateGenerator {\n          const [list, item] = args as [ListValue, Value];\n\n          const vector = listValueAsVector(list);\n          if (vector === undefined) {\n            throw {\n              tag: \"ImproperList\",\n              functionName: \"contains?\",\n              argValue: list,\n            } satisfies ImproperList;\n          }\n\n          return { kind: \"Boolean\", value: vector.some((listItem) => datumEqual(listItem, item)) };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `item` is in `list`.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"Element\" }],\n        body: {\n          tag: \"Function\",\n          of: [{ tag: \"List\", of: [{ var: \"Element\" }] }, { var: \"Element\" }, { tag: \"Boolean\" }],\n        },\n      },\n    },\n  },\n  {\n    name: \"string-concatenate\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"strings\", type: \"String\", variadic: true }],\n        *body(args): EvalStateGenerator {\n          const strings = getVariadic<StringDatum>(0, args);\n          return {\n            kind: \"String\",\n            value: strings.map(({ value }) => value).reduce((acc, s) => acc + s),\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Concatenates the given `strings` together, in order.\",\n      typeAnnotation: {\n        tag: \"Function*\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }],\n      },\n    },\n  },\n  {\n    name: \"string-repeat\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string\", type: \"String\" },\n          { name: \"count\", type: \"Number\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string, count] = args as [StringDatum, NumberDatum];\n          return { kind: \"String\", value: repeat(string.value, count.value) };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Creates a new string consisting of `count` copies of `string`.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"Integer\" }, { tag: \"String\" }],\n      },\n    },\n  },\n  {\n    name: \"string-length\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"string\", type: \"String\" }],\n        *body(args): EvalStateGenerator {\n          const [string] = args as [StringDatum];\n          return { kind: \"Number\", value: string.value.length };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the number of characters in `string`.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"Integer\" }],\n      },\n    },\n  },\n  {\n    name: \"string-slice\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string\", type: \"String\" },\n          { name: \"start\", type: \"Number\", optional: true },\n          { name: \"end\", type: \"Number\", optional: true },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string, start, end] = args as [\n            StringDatum,\n            NumberDatum | undefined,\n            NumberDatum | undefined,\n          ];\n          const startIdx = start ? start.value : undefined;\n          const endIdx = end ? end.value : undefined;\n          return { kind: \"String\", value: string.value.slice(startIdx, endIdx) };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the characters in `string` from `start` (inclusive) to `end` (exclusive). If not given, `start` is 0, and `end` is the length of `string`.\",\n      typeAnnotation: {\n        tag: \"Function*\",\n        of: [{ tag: \"String\" }, { tag: \"Integer\" }, { tag: \"String\" }],\n        minArgCount: 1,\n        maxArgCount: 3,\n      },\n    },\n  },\n  {\n    name: \"string-character-at\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string\", type: \"String\" },\n          { name: \"index\", type: \"Number\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string, index] = args as [StringDatum, NumberDatum];\n          const char = string.value.at(index.value);\n          return { kind: \"String\", value: char ?? \"\" };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Returns the character in `string` at `index`. If there is no such character, returns the empty string.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"Integer\" }, { tag: \"String\" }],\n      },\n    },\n  },\n  {\n    name: \"string=?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return { kind: \"Boolean\", value: string1.value === string2.value };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` and `string2` are equal; that is, they have exactly the same characters in exactly the same order.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"string<?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return { kind: \"Boolean\", value: string1.value < string2.value };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` compares less than `string2` in lexicographic (dictionary) order.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"string>?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return { kind: \"Boolean\", value: string1.value > string2.value };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` compares greater than `string2` in lexicographic (dictionary) order.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"string<=?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return { kind: \"Boolean\", value: string1.value <= string2.value };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` compares less than or equal to `string2` in lexicographic (dictionary) order.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"string>=?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return { kind: \"Boolean\", value: string1.value >= string2.value };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` compares greater than or equal to `string2` in lexicographic (dictionary) order.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"string-ci=?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return {\n            kind: \"Boolean\",\n            value:\n              string1.value.localeCompare(string2.value, undefined, { sensitivity: \"accent\" }) ===\n              0,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` and `string2` are equal, ignoring letter case; that is, they have the same characters (ignoring letter case) in exactly the same order.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"string-ci<?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return {\n            kind: \"Boolean\",\n            value:\n              string1.value.localeCompare(string2.value, undefined, { sensitivity: \"accent\" }) < 0,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` compares less than `string2` in lexicographic (dictionary) order, ignoring letter case.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"string-ci>?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return {\n            kind: \"Boolean\",\n            value:\n              string1.value.localeCompare(string2.value, undefined, { sensitivity: \"accent\" }) > 0,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` compares greater than `string2` in lexicographic (dictionary) order, ignoring letter case.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"string-ci<=?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return {\n            kind: \"Boolean\",\n            value:\n              string1.value.localeCompare(string2.value, undefined, { sensitivity: \"accent\" }) <= 0,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` compares less than or equal to `string2` in lexicographic (dictionary) order, ignoring letter case.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"string-ci>=?\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"string1\", type: \"String\" },\n          { name: \"string2\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          const [string1, string2] = args as [StringDatum, StringDatum];\n          return {\n            kind: \"Boolean\",\n            value:\n              string1.value.localeCompare(string2.value, undefined, { sensitivity: \"accent\" }) >= 0,\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Determines whether `string1` compares greater than or equal to `string2` in lexicographic (dictionary) order, ignoring letter case.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"String\" }, { tag: \"Boolean\" }],\n      },\n    },\n  },\n  {\n    name: \"ellipse\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"x\", type: \"Number\" },\n          { name: \"y\", type: \"Number\" },\n          { name: \"x-radius\", type: \"Number\" },\n          { name: \"y-radius\", type: \"Number\" },\n          { name: \"color\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          type ND = NumberDatum;\n          const [x, y, xRadius, yRadius, color] = args as [ND, ND, ND, ND, StringDatum];\n\n          return {\n            kind: \"List\",\n            heads: [{ kind: \"Symbol\", value: \"ellipse\" }, x, y, xRadius, yRadius, color],\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Makes an ellipse graphic.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [\n          { tag: \"Number\" },\n          { tag: \"Number\" },\n          { tag: \"Number\" },\n          { tag: \"Number\" },\n          { tag: \"String\" },\n          { tag: \"Graphic\" },\n        ],\n      },\n    },\n  },\n  {\n    name: \"rectangle\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"x\", type: \"Number\" },\n          { name: \"y\", type: \"Number\" },\n          { name: \"width\", type: \"Number\" },\n          { name: \"height\", type: \"Number\" },\n          { name: \"color\", type: \"String\" },\n        ],\n        *body(args): EvalStateGenerator {\n          type ND = NumberDatum;\n          const [x, y, width, height, color] = args as [ND, ND, ND, ND, StringDatum];\n\n          return {\n            kind: \"List\",\n            heads: [{ kind: \"Symbol\", value: \"rectangle\" }, x, y, width, height, color],\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Makes a rectangle graphic.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [\n          { tag: \"Number\" },\n          { tag: \"Number\" },\n          { tag: \"Number\" },\n          { tag: \"Number\" },\n          { tag: \"String\" },\n          { tag: \"Graphic\" },\n        ],\n      },\n    },\n  },\n  {\n    name: \"image\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"url\", type: \"String\" },\n          { name: \"x\", type: \"Number\" },\n          { name: \"y\", type: \"Number\" },\n        ],\n        *body(args): EvalStateGenerator {\n          type ND = NumberDatum;\n          type SD = StringDatum;\n          const [url, x, y] = args as [SD, ND, ND];\n\n          return {\n            kind: \"List\",\n            heads: [{ kind: \"Symbol\", value: \"image\" }, url, x, y],\n          };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Makes an image graphic.\",\n      typeAnnotation: {\n        tag: \"Function\",\n        of: [{ tag: \"String\" }, { tag: \"Number\" }, { tag: \"Number\" }, { tag: \"Graphic\" }],\n      },\n    },\n  },\n  {\n    name: \"component\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [{ name: \"initial-state\" }],\n        *body(args, evaluator): EvalStateGenerator {\n          const [initialState] = args as [Value];\n          return SparkgroundComponent.create(initialState, evaluator);\n        },\n      },\n    },\n    attributes: {\n      doc: \"Defines a new component.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"State\" }],\n        body: {\n          tag: \"Function\",\n          of: [{ var: \"State\" }, { tag: \"Component\", of: [{ var: \"State\" }] }],\n        },\n      },\n      headingArgCount: 1,\n    },\n  },\n  {\n    name: \"to-draw\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"component\", type: \"component\" },\n          { name: \"draw-function\", type: \"fn\" },\n        ],\n        *body(args, evaluator): EvalStateGenerator {\n          const [componentValue, drawFn] = args as [ComponentValue, FnValue];\n\n          const compnoent = componentValue.component;\n          compnoent.toDraw = (state) => evaluator.call(drawFn, [state]);\n          return { kind: \"List\", heads: [] };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Describes how `component` is drawn to the screen.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"State\" }],\n        body: {\n          tag: \"Function\",\n          of: [\n            { tag: \"Component\", of: [{ var: \"State\" }] },\n            { tag: \"Function\", of: [{ var: \"State\" }, { tag: \"Graphic\" }] },\n            { tag: \"Empty\" },\n          ],\n        },\n      },\n      headingArgCount: 1,\n      hat: true,\n    },\n  },\n  {\n    name: \"on-tick\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"component\", type: \"component\" },\n          { name: \"tick-function\", type: \"fn\" },\n        ],\n        *body(args, evaluator): EvalStateGenerator {\n          const [componentValue, tickFn] = args as [ComponentValue, FnValue];\n\n          const compnoent = componentValue.component;\n          compnoent.onTick = (state) => evaluator.call(tickFn, [state]);\n\n          return { kind: \"List\", heads: [] };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Describes how `component` changes state after each tick of Sparkground's internal clock (1/60 of a second).\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"State\" }],\n        body: {\n          tag: \"Function\",\n          of: [\n            { tag: \"Component\", of: [{ var: \"State\" }] },\n            { tag: \"Function\", of: [{ var: \"State\" }, { var: \"State\" }] },\n            { tag: \"Empty\" },\n          ],\n        },\n      },\n      headingArgCount: 1,\n      hat: true,\n    },\n  },\n  {\n    name: \"on-key\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [\n          { name: \"component\", type: \"component\" },\n          { name: \"key-function\", type: \"fn\" },\n        ],\n        *body(args, evaluator): EvalStateGenerator {\n          const [componentValue, keyFn] = args as [ComponentValue, FnValue];\n\n          const compnoent = componentValue.component;\n          compnoent.onKey = (state, key) =>\n            evaluator.call(keyFn, [state, { kind: \"String\", value: key }]);\n          return { kind: \"List\", heads: [] };\n        },\n      },\n    },\n    attributes: {\n      doc: \"Describes how `component` changes state after a keyboard key is pressed.\",\n      typeAnnotation: {\n        forall: [{ kind: \"type-name-binding\", id: \"State\" }],\n        body: {\n          tag: \"Function\",\n          of: [\n            { tag: \"Component\", of: [{ var: \"State\" }] },\n            { tag: \"Function\", of: [{ var: \"State\" }, { tag: \"String\" }, { var: \"State\" }] },\n            { tag: \"Empty\" },\n          ],\n        },\n      },\n      headingArgCount: 1,\n      hat: true,\n    },\n  },\n]);\n\nexport const ExtensionsEnvironment: Environment = makeEnv([\n  {\n    name: \"null\",\n    cell: {\n      value: {\n        kind: \"fn\",\n        signature: [],\n        *body(): EvalStateGenerator<ListValue> {\n          return {\n            kind: \"List\",\n            heads: [],\n          };\n        },\n      },\n    },\n  },\n]);\n\nexport const InitialEnvironment: Environment = mergeEnvs(\n  ExtensionsEnvironment,\n  SchemeReportEnvironment,\n);\n"],"mappings":"AAAA,OAASA,KAAK,CAAEC,QAAQ,CAAEC,MAAM,CAAEC,MAAM,CAAEC,KAAK,KAAQ,QAAQ,CAE/D,OAKEC,WAAW,CACXC,iBAAiB,CACjBC,WAAW,CACXC,YAAY,KACP,uBAAuB,CAE9B,OAAwBC,eAAe,KAAQ,eAAe,CAE9D,OAASC,MAAM,KAAQ,kBAAkB,CACzC,OAASC,YAAY,KAAQ,uBAAuB,CACpD,OAASC,cAAc,KAAQ,8BAA8B,CAC7D,OAASC,UAAU,KAAQ,sBAAsB,CACjD,OAASC,oBAAoB,KAAQ,2BAA2B,CA2BhE,MAAO,SAAS,CAAAC,OAAOA,CAAiBC,QAA2B,CAAuB,CACxF,MAAO,CAAAhB,KAAK,CAACgB,QAAQ,CAAGC,OAAO,EAAKA,OAAO,CAACC,IAAI,CAAC,CACnD,CACA,MAAO,SAAS,CAAAC,SAASA,CAAA,CAEF,SAAAC,IAAA,CAAAC,SAAA,CAAAC,MAAA,CADlBC,YAAY,KAAAC,KAAA,CAAAJ,IAAA,EAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAAZF,YAAY,CAAAE,IAAA,EAAAJ,SAAA,CAAAI,IAAA,GAEf,MAAO,CAAAC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAE,GAAGJ,YAAY,CAAC,CAC3C,CAEA,MAAO,SAAS,CAAAK,SAASA,CACvBC,WAAgC,CAChCC,eAA8B,CAC9BC,QAAmB,CACnB,CACA,MAAO,CAAAZ,SAAS,CACdU,WAAW,CACXd,OAAO,CACLgB,QAAQ,CACLC,MAAM,CAAEC,IAAI,EAAKA,IAAI,CAACC,IAAI,GAAK,cAAc,CAAC,CAC9CC,GAAG,CACF,CAACF,IAAI,CAAEG,KAAK,IAAuB,CACjClB,IAAI,CAAGe,IAAI,CAAiBI,EAAE,CAC9BC,IAAI,CAAE,CAAC,CAAC,CACRC,UAAU,CAAE,CACVC,cAAc,CAAGP,IAAI,CAAiBQ,IAAI,CAC1CC,MAAM,CAAEjC,eAAe,CAACqB,eAAe,CAAEM,KAAK,CAChD,CACF,CAAC,CACH,CACJ,CACF,CAAC,CACH,CAEA;AACA,QAAS,CAAAO,YAAYA,CACnBC,KAAa,CACbC,OAA8C,CACrC,CACT,GAAID,KAAK,CAACtB,MAAM,GAAK,CAAC,CAAE,MAAO,KAAI,CAEnC,GAAI,CAAAwB,IAAI,CAAGF,KAAK,CAAC,CAAC,CAAE,CACpB,GAAI,CAAAG,SAAS,CAAG,IAAI,CACpB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGJ,KAAK,CAACtB,MAAM,EAAIyB,SAAS,CAAEC,CAAC,EAAE,CAAE,CAClD,KAAM,CAAAC,GAAG,CAAGL,KAAK,CAACI,CAAC,CAAE,CACrB,GAAIH,OAAO,CAACC,IAAI,CAAEG,GAAG,CAAC,CAAEH,IAAI,CAAGG,GAAG,CAAC,IAC9B,CAAAF,SAAS,CAAG,KAAK,CACxB,CAEA,MAAO,CAAAA,SAAS,CAClB,CAEA;AACA,MAAO,MAAM,CAAAG,uBAAoC,CAAGnC,OAAO,CAAC,CAC1D,CACEG,IAAI,CAAE,OAAO,CACboB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CACElC,IAAI,CAAE,UAAU,CAChBuB,IAAI,CAAE,IACR,CAAC,CACD,CACEvB,IAAI,CAAE,MAAM,CACZuB,IAAI,CAAE,MACR,CAAC,CACF,CACD,CAACY,IAAIA,CAACC,IAAI,CAAEC,SAAS,CAAsB,CACzC,KAAM,CAACC,EAAE,CAAEC,OAAO,CAAC,CAAGH,IAA4B,CAElD,KAAM,CAAAI,IAAI,CAAGpD,iBAAiB,CAACmD,OAAO,CAAC,CACvC,GAAI,CAACC,IAAI,CAAE,CACT,KAAM,CACJC,GAAG,CAAE,cAAc,CACnBC,YAAY,CAAE,OAAO,CACrBC,QAAQ,CAAEJ,OACZ,CAAC,CACH,CAEA,MAAO,OAAOF,SAAS,CAACO,IAAI,CAACN,EAAE,CAAEE,IAAI,CAAC,CACxC,CACF,CACF,CAAC,CACDnB,UAAU,CAAE,CACVwB,GAAG,CAAE,4DAA4D,CACjEvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEO,GAAG,CAAE,KAAM,CAAC,CAAE,CAAC,CAC1D,CAAEP,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAC,CACrC,CAAEO,GAAG,CAAE,KAAM,CAAC,CAElB,CACF,CACF,CACF,CAAC,CACD,CACEhD,IAAI,CAAE,KAAK,CACXoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CACElC,IAAI,CAAE,UAAU,CAChBuB,IAAI,CAAE,IACR,CAAC,CACD,CACEvB,IAAI,CAAE,OAAO,CACbuB,IAAI,CAAE,MAAM,CACZ0B,QAAQ,CAAE,IACZ,CAAC,CACF,CACD,CAACd,IAAIA,CAACC,IAAI,CAAEC,SAAS,CAAsB,CACzC,KAAM,CAACC,EAAE,CAAC,CAAGF,IAAiB,CAC9B,KAAM,CAAAc,KAAK,CAAG/D,WAAW,CAAY,CAAC,CAAEiD,IAAI,CAAC,CAE7C,GAAI,CAACc,KAAK,CAAC9C,MAAM,CAAE,MAAO,CAAEY,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAE,EAAG,CAAC,CAErD,KAAM,CAAAC,OAAO,CAAGF,KAAK,CAACjC,GAAG,CAAC7B,iBAAiB,CAAC,CAC5C,KAAM,CAAAiE,YAAY,CAAGD,OAAO,CAACE,SAAS,CAAEC,MAAM,EAAKA,MAAM,GAAKC,SAAS,CAAC,CACxE,GAAIH,YAAY,GAAK,CAAC,CAAC,CAAE,CACvB,KAAM,CACJZ,GAAG,CAAE,cAAc,CACnBC,YAAY,CAAE,KAAK,CACnBC,QAAQ,CAAEO,KAAK,CAACG,YAAY,CAC9B,CAAC,CACH,CACA,KAAM,CAAAI,IAAI,CAAGL,OAAoB,CAEjC,KAAM,CAAAM,KAAK,CAAGN,OAAO,CAAC,CAAC,CAAC,CAAEhD,MAAM,CAChC,GAAI,CAAAuD,OAAgB,CAAG,EAAE,CACzB,IAAK,GAAI,CAAA7B,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG4B,KAAK,CAAE5B,CAAC,EAAE,CAAE,CAC9B,KAAM,CAAA8B,YAAY,CAAGH,IAAI,CAACxC,GAAG,CAAE4C,GAAG,EAAKA,GAAG,CAAC/B,CAAC,CAAC,CAAC,CAC9C,GAAI8B,YAAY,CAACE,IAAI,CAAEC,KAAK,EAAKA,KAAK,GAAKP,SAAS,CAAC,CAAE,CACrD,KAAM,6CAA6C,CACrD,CACA,KAAM,CAAAQ,GAAG,CAAGJ,YAAuB,CAEnCD,OAAO,CAACM,IAAI,CAAC,MAAO5B,SAAS,CAACO,IAAI,CAACN,EAAE,CAAE0B,GAAG,CAAC,CAAC,CAC9C,CAEA,MAAO,CAAEhD,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAEQ,OAAQ,CAAC,CACzC,CACF,CACF,CAAC,CACDtC,UAAU,CAAE,CACVwB,GAAG,CAAE,sFAAsF,CAC3FvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CACN,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAC5C,CAAEH,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,YAAa,CAAC,CAChD,CACDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAEA,GAAG,CAAE,YAAa,CAAC,CAAE,CAAC,CACpE,CAAEP,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACzC,CAAEP,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,YAAa,CAAC,CAAE,CAAC,CAEhD,CACF,CACF,CACF,CAAC,CACD,CACEhD,IAAI,CAAE,MAAM,CACZoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,YAAa,CAAC,CAAE,CAAEA,IAAI,CAAE,aAAc,CAAC,CAAC,CAC5D,CAACmC,IAAIA,CAACC,IAAI,CAAEC,SAAS,CAAsB,KAAA6B,eAAA,CACzC,KAAM,CAACC,UAAU,CAAEC,GAAG,CAAC,CAAGhC,IAAsB,CAChD,GAAI,CAAC9C,YAAY,CAAC6E,UAAU,CAAC,CAAE,CAC7B,KAAM,sFAAsF,CAC9F,CAEA,GAAI,CAAAE,eAAsB,CAC1B,GAAIF,UAAU,CAACnD,IAAI,GAAK,MAAM,CAAE,CAC9B,KAAM,CAAAuC,MAAM,CAAGnE,iBAAiB,CAAC+E,UAAU,CAAC,CAC5C,GAAIZ,MAAM,GAAKC,SAAS,CAAE,CACxB,KAAM,CACJf,GAAG,CAAE,cAAc,CACnBC,YAAY,CAAE,MAAM,CACpBC,QAAQ,CAAEwB,UACZ,CAAC,CACH,CACAE,eAAe,CAAG,CAAErD,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAEI,MAAkB,CAAC,CAC9D,CAAC,IAAM,CACLc,eAAe,CAAGF,UAAU,CAC9B,CAEA;AAEA,MAAO,QAAAD,eAAA,CAAO7B,SAAS,CAACiC,IAAI,CAAC,CAC3BC,IAAI,CAAE,GAAI,CAAA/E,MAAM,CAAC,CAAC,CAACgF,YAAY,CAAC/E,YAAY,CAAC4E,eAAe,CAAC,CAC/D,CAAC,CAAC,UAAAH,eAAA,UAAAA,eAAA,CAAI,CACJlD,IAAI,CAAE,MAAM,CACZmC,KAAK,CAAE,EACT,CAAC,CACH,CACF,CACF,CAAC,CACD9B,UAAU,CAAE,CACVwB,GAAG,CAAE,kFAAkF,CACvFvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,KAAM,CAAC,CAAE,CAC1F,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,KAAK,CACXoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,OAAQ,CAAC,CAAC,CAC9B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACH,KAAK,CAAC,CAAGG,IAAe,CAC/B,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAE,CAAC5C,WAAW,CAAC4C,KAAK,CAAE,CAAC,CACxD,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,4BAA4B,CACjCvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,UAAU,CAChBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,KAAM,CAAC,CAAC,CAC5B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACqC,GAAG,CAAC,CAAGrC,IAAe,CAC7B,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEwC,GAAG,CAACzD,IAAI,GAAK,SAAU,CAAC,CAC3D,CACF,CACF,CAAC,CACDK,UAAU,CAAE,CACVwB,GAAG,CAAE,8DAA8D,CACnEvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,SAAS,CACfoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,KAAM,CAAC,CAAC,CAC5B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACqC,GAAG,CAAC,CAAGrC,IAAe,CAC7B,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEwC,GAAG,CAACzD,IAAI,GAAK,QAAS,CAAC,CAC1D,CACF,CACF,CAAC,CACDK,UAAU,CAAE,CACVwB,GAAG,CAAE,6CAA6C,CAClDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,SAAS,CACfoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,KAAM,CAAC,CAAC,CAC5B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACqC,GAAG,CAAC,CAAGrC,IAAe,CAC7B,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEwC,GAAG,CAACzD,IAAI,GAAK,QAAS,CAAC,CAC1D,CACF,CACF,CAAC,CACDK,UAAU,CAAE,CACVwB,GAAG,CAAE,6CAA6C,CAClDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,SAAS,CACfoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,KAAM,CAAC,CAAC,CAC5B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACqC,GAAG,CAAC,CAAGrC,IAAe,CAC7B,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEwC,GAAG,CAACzD,IAAI,GAAK,QAAS,CAAC,CAC1D,CACF,CACF,CAAC,CACDK,UAAU,CAAE,CACVwB,GAAG,CAAE,6CAA6C,CAClDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,OAAO,CACboB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,KAAM,CAAC,CAAC,CAC5B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACqC,GAAG,CAAC,CAAGrC,IAAe,CAC7B,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEwC,GAAG,CAACzD,IAAI,GAAK,MAAO,CAAC,CACxD,CACF,CACF,CAAC,CACDK,UAAU,CAAE,CACVwB,GAAG,CAAE,2CAA2C,CAChDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,YAAY,CAClBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,KAAM,CAAC,CAAC,CAC5B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACqC,GAAG,CAAC,CAAGrC,IAAe,CAC7B,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEwC,GAAG,CAACzD,IAAI,GAAK,IAAK,CAAC,CACtD,CACF,CACF,CAAC,CACDK,UAAU,CAAE,CACVwB,GAAG,CAAE,2DAA2D,CAChEvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,gBAAgB,CACtBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC/C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACsC,MAAM,CAAC,CAAGtC,IAAqB,CACtC,MAAO,CAAEpB,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAE0C,MAAM,CAACC,QAAQ,CAACF,MAAM,CAACzC,KAAK,CAAE,CAAC,CACjE,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,kDAAkD,CACvDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,gBAAgB,CACtBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC/C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACyC,MAAM,CAAC,CAAGzC,IAAqB,CACtC,MAAO,CAAEpB,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAE,GAAI,CAAA0C,MAAM,CAACE,MAAM,CAAC5C,KAAK,CAAC,CAAC6C,QAAQ,CAAC,CAAE,CAAC,CACvE,CACF,CACF,CAAC,CACDzD,UAAU,CAAE,CACVwB,GAAG,CAAE,2CAA2C,CAChDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,gBAAgB,CACtBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC7C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACpC,IAAI,CAAC,CAAGoC,IAAqB,CACpC,MAAO,CAAEpB,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAEjC,IAAI,CAACiC,KAAM,CAAC,CAC9C,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,kDAAkD,CACvDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,gBAAgB,CACtBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC/C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACpC,IAAI,CAAC,CAAGoC,IAAqB,CACpC,MAAO,CAAEpB,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAEjC,IAAI,CAACiC,KAAM,CAAC,CAC9C,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,2CAA2C,CAChDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,GAAG,CACToB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CAAC,CAChE,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAAA2C,OAAO,CAAG5F,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CAAEpB,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAE/C,KAAK,CAAC6F,OAAO,CAAEC,IAAA,MAAC,CAAE/C,KAAM,CAAC,CAAA+C,IAAA,OAAK,CAAA/C,KAAK,GAAE,CAAC,CACxE,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,uDAAuD,CAC5DvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAC,CAChFwC,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,GAAG,CACToB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CACpD,CACD,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACyC,MAAM,CAAC,CAAGzC,IAAqB,CACtC,KAAM,CAAA2C,OAAO,CAAG5F,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAE8C,OAAO,CAAC3E,MAAM,CACjByE,MAAM,CAAC5C,KAAK,CAAG/C,KAAK,CAAC6F,OAAO,CAAEG,KAAA,MAAC,CAAEjD,KAAM,CAAC,CAAAiD,KAAA,OAAK,CAAAjD,KAAK,GAAC,CACnD,CAAC4C,MAAM,CAAC5C,KACd,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,mLAAmL,CACxLvB,cAAc,CAAE,CACdmB,GAAG,CAAE,WAAW,CAChBM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAC,CAC1C0C,WAAW,CAAE,CACf,CAAC,CACDF,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,GAAG,CACToB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CAAC,CAChE,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAAA2C,OAAO,CAAG5F,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEjD,MAAM,CACX+F,OAAO,CAAC9D,GAAG,CAACmE,KAAA,MAAC,CAAEnD,KAAM,CAAC,CAAAmD,KAAA,OAAK,CAAAnD,KAAK,GAAC,CACjClD,QAAQ,CACR,CACF,CACF,CAAC,CACH,CACF,CACF,CAAC,CACDsC,UAAU,CAAE,CACVwB,GAAG,CAAE,6DAA6D,CAClEvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAC,CAChFwC,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,GAAG,CACToB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CACpD,CACD,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACyC,MAAM,CAAC,CAAGzC,IAAqB,CACtC,KAAM,CAAA2C,OAAO,CAAG5F,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAE8C,OAAO,CAAC3E,MAAM,CACjByE,MAAM,CAAC5C,KAAK,CACZjD,MAAM,CACJ+F,OAAO,CAAC9D,GAAG,CAACoE,KAAA,MAAC,CAAEpD,KAAM,CAAC,CAAAoD,KAAA,OAAK,CAAApD,KAAK,GAAC,CACjClD,QAAQ,CACR,CACF,CAAC,CACD,CAAC,CAAG8F,MAAM,CAAC5C,KACjB,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,8KAA8K,CACnLvB,cAAc,CAAE,CACdmB,GAAG,CAAE,WAAW,CAChBM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAC,CAC1C0C,WAAW,CAAE,CACf,CAAC,CACDF,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,KAAK,CACXoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,UAAU,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACkD,QAAQ,CAAEC,OAAO,CAAC,CAAGnD,IAAkC,CAC9D,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEqD,QAAQ,CAACrD,KAAK,CAAGsD,OAAO,CAACtD,KAClC,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,oFAAoF,CACzFvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAC9D,CAAC,CACDwC,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,KAAK,CACXoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC1C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAqB,CACjC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACC,GAAG,CAACF,CAAC,CAACvD,KAAK,CACzB,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,6EAA6E,CAClFvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,OAAO,CACboB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC1C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAqB,CACjC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACE,KAAK,CAACH,CAAC,CAACvD,KAAK,CAC3B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,6FAA6F,CAClGvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CACjF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,SAAS,CACfoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC1C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAqB,CACjC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACG,IAAI,CAACJ,CAAC,CAACvD,KAAK,CAC1B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,+FAA+F,CACpGvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CACjF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,OAAO,CACboB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC1C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAqB,CACjC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACI,KAAK,CAACL,CAAC,CAACvD,KAAK,CAC3B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,wFAAwF,CAC7FvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CACjF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,UAAU,CAChBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC1C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAqB,CACjC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACK,KAAK,CAACN,CAAC,CAACvD,KAAK,CAC3B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,kEAAkE,CACvEvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CACjF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,KAAK,CACXoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC1C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAqB,CACjC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACM,GAAG,CAACP,CAAC,CAACvD,KAAK,CACzB,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,4EAA4E,CACjFvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,KAAK,CACXoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC1C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAqB,CACjC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACO,GAAG,CAACR,CAAC,CAACvD,KAAK,CACzB,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,iEAAiE,CACtEvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,GAAG,CACToB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAChC,CAAEvB,IAAI,CAAE,UAAU,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACrC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAAC6D,IAAI,CAAEC,QAAQ,CAAC,CAAG9D,IAAkC,CAC3D,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACU,GAAG,CAACF,IAAI,CAAChE,KAAK,CAAEiE,QAAQ,CAACjE,KAAK,CAC5C,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,iDAAiD,CACtDvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAC9D,CAAC,CACDwC,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,KAAK,CACXoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC9C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACgE,KAAK,CAAC,CAAGhE,IAAqB,CACrC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACY,GAAG,CAACD,KAAK,CAACnE,KAAK,CAC7B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,0CAA0C,CAC/CvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,KAAK,CACXoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC9C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACgE,KAAK,CAAC,CAAGhE,IAAqB,CACrC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACa,GAAG,CAACF,KAAK,CAACnE,KAAK,CAC7B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,4CAA4C,CACjDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,KAAK,CACXoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC9C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACgE,KAAK,CAAC,CAAGhE,IAAqB,CACrC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACc,GAAG,CAACH,KAAK,CAACnE,KAAK,CAC7B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,6CAA6C,CAClDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,MAAM,CACZoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC9C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoE,KAAK,CAAC,CAAGpE,IAAqB,CACrC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACgB,IAAI,CAACD,KAAK,CAACvE,KAAK,CAC9B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,6CAA6C,CAClDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,MAAM,CACZoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC9C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoE,KAAK,CAAC,CAAGpE,IAAqB,CACrC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACiB,IAAI,CAACF,KAAK,CAACvE,KAAK,CAC9B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,gDAAgD,CACrDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,MAAM,CACZoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC9C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoE,KAAK,CAAC,CAAGpE,IAAqB,CACrC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACkB,IAAI,CAACH,KAAK,CAACvE,KAAK,CAC9B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,gDAAgD,CACrDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,MAAM,CACZoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC1C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAqB,CACjC,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEwD,IAAI,CAACmB,IAAI,CAACpB,CAAC,CAACvD,KAAK,CAC1B,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,8CAA8C,CACnDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAChF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,GAAG,CACToB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CAAC,CAChE,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAAA2C,OAAO,CAAG5F,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CAAER,YAAY,CAACsD,OAAO,CAAE,CAAC8B,KAAK,CAAEC,KAAK,GAAKD,KAAK,CAAC5E,KAAK,GAAK6E,KAAK,CAAC7E,KAAK,CAC5E,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,2DAA2D,CAChEvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACjFwC,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,GAAG,CACToB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CAAC,CAChE,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAAA2C,OAAO,CAAG5F,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CAAER,YAAY,CAACsD,OAAO,CAAE,CAAC8B,KAAK,CAAEC,KAAK,GAAKD,KAAK,CAAC5E,KAAK,CAAG6E,KAAK,CAAC7E,KAAK,CAC1E,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,gEAAgE,CACrEvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACjFwC,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,GAAG,CACToB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CAAC,CAChE,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAAA2C,OAAO,CAAG5F,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CAAER,YAAY,CAACsD,OAAO,CAAE,CAAC8B,KAAK,CAAEC,KAAK,GAAKD,KAAK,CAAC5E,KAAK,CAAG6E,KAAK,CAAC7E,KAAK,CAC1E,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,gEAAgE,CACrEvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACjFwC,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,IAAI,CACVoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CAAC,CAChE,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAAA2C,OAAO,CAAG5F,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CAAER,YAAY,CAACsD,OAAO,CAAE,CAAC8B,KAAK,CAAEC,KAAK,GAAKD,KAAK,CAAC5E,KAAK,EAAI6E,KAAK,CAAC7E,KAAK,CAC3E,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,sEAAsE,CAC3EvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACjFwC,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,IAAI,CACVoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CAAC,CAChE,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAAA2C,OAAO,CAAG5F,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CAAER,YAAY,CAACsD,OAAO,CAAE,CAAC8B,KAAK,CAAEC,KAAK,GAAKD,KAAK,CAAC5E,KAAK,EAAI6E,KAAK,CAAC7E,KAAK,CAC3E,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,sEAAsE,CAC3EvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACjFwC,KAAK,CAAE,IACT,CACF,CAAC,CACD,CACEjF,IAAI,CAAE,OAAO,CACboB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAI,CAAC,CAAC,CAC1B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAe,CAC3B,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CAAEuD,CAAC,CAACxE,IAAI,GAAK,QAAQ,EAAIwE,CAAC,CAACvD,KAAK,GAAK,CAC5C,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,qCAAqC,CAC1CvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,WAAW,CACjBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAI,CAAC,CAAC,CAC1B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAe,CAC3B,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CAAEuD,CAAC,CAACxE,IAAI,GAAK,QAAQ,EAAIwE,CAAC,CAACvD,KAAK,CAAG,CAC1C,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,oDAAoD,CACzDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,WAAW,CACjBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAI,CAAC,CAAC,CAC1B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAe,CAC3B,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CAAEuD,CAAC,CAACxE,IAAI,GAAK,QAAQ,EAAIwE,CAAC,CAACvD,KAAK,CAAG,CAC1C,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,oDAAoD,CACzDvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,UAAU,CAChBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,GAAI,CAAC,CAAC,CAC1B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoD,CAAC,CAAC,CAAGpD,IAAe,CAC3B,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CAAEuD,CAAC,CAACxE,IAAI,GAAK,QAAQ,EAAIyE,IAAI,CAACE,KAAK,CAACH,CAAC,CAACvD,KAAK,CAAC,GAAKwD,IAAI,CAACG,IAAI,CAACJ,CAAC,CAACvD,KAAK,CACzE,CAAC,CACH,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,6FAA6F,CAClGvB,cAAc,CAAE,CAAEmB,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAC9E,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,MAAM,CACZoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,OAAQ,CAAC,CAAE,CAAEA,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,MAAO,CAAC,CAAC,CAC9D,CAACY,IAAIA,CAACC,IAAI,CAAiC,CACzC,KAAM,CAAC2E,IAAI,CAAEC,IAAI,CAAC,CAAG5E,IAAsB,CAC3C,MAAO,CACLpB,IAAI,CAAE,MAAM,CACZmC,KAAK,CAAE,CAAC4D,IAAI,CAAC,CACbC,IACF,CAAC,CACH,CACF,CACF,CAAC,CACD3F,UAAU,CAAE,CACVwB,GAAG,CAAE,+FAA+F,CACpGvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEC,GAAG,CAAE,SAAU,CAAC,CAClB,CAAEP,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACzC,CAAEP,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAE7C,CACF,CACF,CACF,CAAC,CACD,CACEhD,IAAI,CAAE,MAAM,CACZoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,UAAU,CAAEiD,QAAQ,CAAE,IAAK,CAAC,CAAC,CACjD,CAACd,IAAIA,CAACC,IAAI,CAAiC,CACzC,KAAM,CAAA6E,QAAQ,CAAG9H,WAAW,CAAC,CAAC,CAAEiD,IAAI,CAAC,CACrC,MAAO,CACLpB,IAAI,CAAE,MAAM,CACZmC,KAAK,CAAE8D,QACT,CAAC,CACH,CACF,CACF,CAAC,CACD5F,UAAU,CAAE,CACVwB,GAAG,CAAE,8CAA8C,CACnDvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,WAAW,CAChBM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAEP,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACpE,CACF,CACF,CACF,CAAC,CACD,CACEhD,IAAI,CAAE,aAAa,CACnBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,MAAM,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CAAC,CAC5D,CAACd,IAAIA,CAACC,IAAI,CAAiC,CACzC,KAAM,CAAAc,KAAK,CAAG/D,WAAW,CAAY,CAAC,CAAEiD,IAAI,CAAC,CAE7C,KAAM,CAAA8E,IAAI,CAAGhE,KAAK,CAACjC,GAAG,CAAC7B,iBAAiB,CAAC,CAAC0B,MAAM,CAAE0E,CAAC,EAAKA,CAAC,CAAC,CAC1D,GAAI0B,IAAI,CAAC9G,MAAM,GAAK8C,KAAK,CAAC9C,MAAM,CAAE,CAChC,KAAM,CAAAiD,YAAY,CAAGH,KAAK,CAACjC,GAAG,CAAC7B,iBAAiB,CAAC,CAACkE,SAAS,CAAEkC,CAAC,EAAK,CAACA,CAAC,CAAC,CACtE,KAAM,CACJ/C,GAAG,CAAE,cAAc,CACnBC,YAAY,CAAE,aAAa,CAC3BC,QAAQ,CAAEO,KAAK,CAACG,YAAY,CAC9B,CAAC,CACH,CAEA,MAAO,CAAErC,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAG+D,IAAI,CAAeC,IAAI,CAAC,CAAC,CAAE,CAAC,CAC7D,CACF,CACF,CAAC,CACD9F,UAAU,CAAE,CACVwB,GAAG,CAAE,0EAA0E,CAC/EvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,WAAW,CAChBM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACzC,CAAEP,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAE7C,CACF,CACF,CACF,CAAC,CACD,CACEhD,IAAI,CAAE,SAAS,CACfoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,MAAO,CAAC,CAAC,CAC3C,CAACY,IAAIA,CAACC,IAAI,CAAiC,CACzC,KAAM,CAACgF,IAAI,CAAC,CAAGhF,IAAmB,CAElC,KAAM,CAAAiF,GAAG,CAAGjI,iBAAiB,CAACgI,IAAI,CAAC,CACnC,GAAI,CAACC,GAAG,CAAE,CACR,KAAM,CACJ5E,GAAG,CAAE,cAAc,CACnBC,YAAY,CAAE,SAAS,CACvBC,QAAQ,CAAEyE,IACZ,CAAC,CACH,CAEA,MAAO,CAAEpG,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAE,CAAC,GAAGkE,GAAG,CAAC,CAACC,OAAO,CAAC,CAAE,CAAC,CACpD,CACF,CACF,CAAC,CACDjG,UAAU,CAAE,CACVwB,GAAG,CAAE,8EAA8E,CACnFvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACzC,CAAEP,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAE7C,CACF,CACF,CACF,CAAC,CACD,CACEhD,IAAI,CAAE,OAAO,CACboB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,MAAO,CAAC,CAAC,CAC3C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACgF,IAAI,CAAC,CAAGhF,IAAmB,CAClC;AACA,MAAO,CAAAgF,IAAI,CAACjE,KAAK,CAAC,CAAC,CAAC,CACtB,CACF,CACF,CAAC,CACD9B,UAAU,CAAE,CACVwB,GAAG,CAAE,sCAAsC,CAC3CvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CACpE,CACF,CACF,CACF,CAAC,CACD,CACEhD,IAAI,CAAE,MAAM,CACZoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,MAAO,CAAC,CAAC,CAC3C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACgF,IAAI,CAAC,CAAGhF,IAAmB,CAClC,GAAIgF,IAAI,CAACjE,KAAK,CAAC/C,MAAM,CAAG,CAAC,CAAE,CACzB,MAAO,CAAEY,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAE,CAAC,GAAGiE,IAAI,CAACjE,KAAK,CAACoE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAEP,IAAI,CAAEI,IAAI,CAACJ,IAAK,CAAC,CAC3E,CAAC,IAAM,KAAAQ,UAAA,CACL,OAAAA,UAAA,CAAOJ,IAAI,CAACJ,IAAI,UAAAQ,UAAA,UAAAA,UAAA,CAAI,CAAExG,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAE,EAAG,CAAC,CACjD,CACF,CACF,CACF,CAAC,CACD9B,UAAU,CAAE,CACVwB,GAAG,CAAE,0DAA0D,CAC/DvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CACzC,CAAEP,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAE7C,CACF,CACF,CACF,CAAC,CACD,CACEhD,IAAI,CAAE,QAAQ,CACdoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,KAAM,CAAC,CAAC,CAC5B,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACqC,GAAG,CAAC,CAAGrC,IAAI,CAClB,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAE,CAAAwC,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAEzD,IAAI,IAAK,MAAM,EAAIyD,GAAG,CAACtB,KAAK,CAAC/C,MAAM,GAAK,CAAE,CAAC,CACnF,CACF,CACF,CAAC,CACDiB,UAAU,CAAE,CACVwB,GAAG,CAAE,6CAA6C,CAClDvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,KAAM,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CACzC,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,QAAQ,CACdoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,MAAO,CAAC,CAAC,CAC3C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACgF,IAAI,CAAC,CAAGhF,IAAmB,CAElC,KAAM,CAAAmB,MAAM,CAAGnE,iBAAiB,CAACgI,IAAI,CAAC,CACtC,GAAI7D,MAAM,GAAKC,SAAS,CAAE,CACxB,KAAM,CACJf,GAAG,CAAE,cAAc,CACnBC,YAAY,CAAE,QAAQ,CACtBC,QAAQ,CAAEyE,IACZ,CAAC,CACH,CAEA,MAAO,CAAEpG,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAEsB,MAAM,CAACnD,MAAO,CAAC,CACjD,CACF,CACF,CAAC,CACDiB,UAAU,CAAE,CACVwB,GAAG,CAAE,2CAA2C,CAChDvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAAE,CAAEP,GAAG,CAAE,SAAU,CAAC,CACpE,CACF,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,SAAS,CACfoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,MAAO,CAAC,CAC9B,CAAEvB,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACgF,IAAI,CAAElG,KAAK,CAAC,CAAGkB,IAAgC,CAEtD,KAAM,CAAAmB,MAAM,CAAGnE,iBAAiB,CAACgI,IAAI,CAAC,CACtC,GAAI7D,MAAM,GAAKC,SAAS,CAAE,CACxB,KAAM,CACJf,GAAG,CAAE,cAAc,CACnBC,YAAY,CAAE,UAAU,CACxBC,QAAQ,CAAEyE,IACZ,CAAC,CACH,CAEA,KAAM,CAAAK,IAAI,CAAGlE,MAAM,CAACrC,KAAK,CAACe,KAAK,CAAC,CAChC,GAAIwF,IAAI,GAAKjE,SAAS,CAAE,CACtB,KAAM,CAAEf,GAAG,CAAE,kBAAkB,CAAE2E,IAAI,CAAElG,KAAK,CAAEA,KAAK,CAACe,KAAM,CAAC,CAC7D,CAEA,MAAO,CAAAwF,IAAI,CACb,CACF,CACF,CAAC,CACDpG,UAAU,CAAE,CACVwB,GAAG,CAAE,wCAAwC,CAC7CvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAAE,CAAEP,GAAG,CAAE,SAAU,CAAC,CAAE,CAAEO,GAAG,CAAE,SAAU,CAAC,CACxF,CACF,CACF,CACF,CAAC,CACD,CACEhD,IAAI,CAAE,UAAU,CAChBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,MAAO,CAAC,CAAE,CAAEvB,IAAI,CAAE,MAAO,CAAC,CAAC,CAC7D,CAACmC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACgF,IAAI,CAAEK,IAAI,CAAC,CAAGrF,IAA0B,CAE/C,KAAM,CAAAmB,MAAM,CAAGnE,iBAAiB,CAACgI,IAAI,CAAC,CACtC,GAAI7D,MAAM,GAAKC,SAAS,CAAE,CACxB,KAAM,CACJf,GAAG,CAAE,cAAc,CACnBC,YAAY,CAAE,UAAU,CACxBC,QAAQ,CAAEyE,IACZ,CAAC,CACH,CAEA,MAAO,CACLpG,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAEsB,MAAM,CAACD,SAAS,CAAEoE,QAAQ,EAAK/H,UAAU,CAAC+H,QAAQ,CAAED,IAAI,CAAC,CAClE,CAAC,CACH,CACF,CACF,CAAC,CACDpG,UAAU,CAAE,CACVwB,GAAG,CAAE,+EAA+E,CACpFvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAEP,GAAG,CAAE,SAAU,CAAC,CACxF,CACF,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,WAAW,CACjBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE,MAAO,CAAC,CAC9B,CAAEvB,IAAI,CAAE,MAAM,CAAEuB,IAAI,CAAE7B,cAAe,CAAC,CACvC,CACD,CAACyC,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACgF,IAAI,CAAEK,IAAI,CAAC,CAAGrF,IAA0B,CAE/C,KAAM,CAAAmB,MAAM,CAAGnE,iBAAiB,CAACgI,IAAI,CAAC,CACtC,GAAI7D,MAAM,GAAKC,SAAS,CAAE,CACxB,KAAM,CACJf,GAAG,CAAE,cAAc,CACnBC,YAAY,CAAE,WAAW,CACzBC,QAAQ,CAAEyE,IACZ,CAAC,CACH,CAEA,MAAO,CAAEpG,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEsB,MAAM,CAACO,IAAI,CAAE4D,QAAQ,EAAK/H,UAAU,CAAC+H,QAAQ,CAAED,IAAI,CAAC,CAAE,CAAC,CAC1F,CACF,CACF,CAAC,CACDpG,UAAU,CAAE,CACVwB,GAAG,CAAE,yCAAyC,CAC9CvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,SAAU,CAAC,CAAC,CACtDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,MAAM,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAEP,GAAG,CAAE,SAAU,CAAC,CACxF,CACF,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,oBAAoB,CAC1BoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAQ,CAAE0B,QAAQ,CAAE,IAAK,CAAC,CAAC,CAChE,CAACd,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAAAuF,OAAO,CAAGxI,WAAW,CAAc,CAAC,CAAEiD,IAAI,CAAC,CACjD,MAAO,CACLpB,IAAI,CAAE,QAAQ,CACdiB,KAAK,CAAE0F,OAAO,CAAC1G,GAAG,CAAC2G,KAAA,MAAC,CAAE3F,KAAM,CAAC,CAAA2F,KAAA,OAAK,CAAA3F,KAAK,GAAC,CAACjD,MAAM,CAAC,CAAC6I,GAAG,CAAEC,CAAC,GAAKD,GAAG,CAAGC,CAAC,CACrE,CAAC,CACH,CACF,CACF,CAAC,CACDzG,UAAU,CAAE,CACVwB,GAAG,CAAE,sDAAsD,CAC3DvB,cAAc,CAAE,CACdmB,GAAG,CAAE,WAAW,CAChBM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAC3C,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,eAAe,CACrBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CAAEvB,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACsC,MAAM,CAAEqD,KAAK,CAAC,CAAG3F,IAAkC,CAC1D,MAAO,CAAEpB,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAEhD,MAAM,CAACyF,MAAM,CAACzC,KAAK,CAAE8F,KAAK,CAAC9F,KAAK,CAAE,CAAC,CACrE,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,gEAAgE,CACrEvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,eAAe,CACrBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAAC,CAC/C,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACsC,MAAM,CAAC,CAAGtC,IAAqB,CACtC,MAAO,CAAEpB,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAEyC,MAAM,CAACzC,KAAK,CAAC7B,MAAO,CAAC,CACvD,CACF,CACF,CAAC,CACDiB,UAAU,CAAE,CACVwB,GAAG,CAAE,+CAA+C,CACpDvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC5C,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,cAAc,CACpBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CAAEvB,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAQ,CAAEyG,QAAQ,CAAE,IAAK,CAAC,CACjD,CAAEhI,IAAI,CAAE,KAAK,CAAEuB,IAAI,CAAE,QAAQ,CAAEyG,QAAQ,CAAE,IAAK,CAAC,CAChD,CACD,CAAC7F,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACsC,MAAM,CAAEuD,KAAK,CAAEC,GAAG,CAAC,CAAG9F,IAI5B,CACD,KAAM,CAAA+F,QAAQ,CAAGF,KAAK,CAAGA,KAAK,CAAChG,KAAK,CAAGuB,SAAS,CAChD,KAAM,CAAA4E,MAAM,CAAGF,GAAG,CAAGA,GAAG,CAACjG,KAAK,CAAGuB,SAAS,CAC1C,MAAO,CAAExC,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAEyC,MAAM,CAACzC,KAAK,CAACsF,KAAK,CAACY,QAAQ,CAAEC,MAAM,CAAE,CAAC,CACxE,CACF,CACF,CAAC,CACD/G,UAAU,CAAE,CACVwB,GAAG,CAAE,oJAAoJ,CACzJvB,cAAc,CAAE,CACdmB,GAAG,CAAE,WAAW,CAChBM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAC,CAC9D0C,WAAW,CAAE,CAAC,CACdkD,WAAW,CAAE,CACf,CACF,CACF,CAAC,CACD,CACErI,IAAI,CAAE,qBAAqB,CAC3BoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CAAEvB,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACsC,MAAM,CAAExD,KAAK,CAAC,CAAGkB,IAAkC,CAC1D,KAAM,CAAAkG,IAAI,CAAG5D,MAAM,CAACzC,KAAK,CAACsG,EAAE,CAACrH,KAAK,CAACe,KAAK,CAAC,CACzC,MAAO,CAAEjB,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAEqG,IAAI,SAAJA,IAAI,UAAJA,IAAI,CAAI,EAAG,CAAC,CAC9C,CACF,CACF,CAAC,CACDjH,UAAU,CAAE,CACVwB,GAAG,CAAE,wGAAwG,CAC7GvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,UAAU,CAChBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEuG,OAAO,CAACvG,KAAK,GAAKwG,OAAO,CAACxG,KAAM,CAAC,CACpE,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,iIAAiI,CACtIvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,UAAU,CAChBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEuG,OAAO,CAACvG,KAAK,CAAGwG,OAAO,CAACxG,KAAM,CAAC,CAClE,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,gGAAgG,CACrGvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,UAAU,CAChBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEuG,OAAO,CAACvG,KAAK,CAAGwG,OAAO,CAACxG,KAAM,CAAC,CAClE,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,mGAAmG,CACxGvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,WAAW,CACjBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEuG,OAAO,CAACvG,KAAK,EAAIwG,OAAO,CAACxG,KAAM,CAAC,CACnE,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,4GAA4G,CACjHvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,WAAW,CACjBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CAAEpB,IAAI,CAAE,SAAS,CAAEiB,KAAK,CAAEuG,OAAO,CAACvG,KAAK,EAAIwG,OAAO,CAACxG,KAAM,CAAC,CACnE,CACF,CACF,CAAC,CACDZ,UAAU,CAAE,CACVwB,GAAG,CAAE,+GAA+G,CACpHvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,aAAa,CACnBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CACHuG,OAAO,CAACvG,KAAK,CAACyG,aAAa,CAACD,OAAO,CAACxG,KAAK,CAAEuB,SAAS,CAAE,CAAEmF,WAAW,CAAE,QAAS,CAAC,CAAC,GAChF,CACJ,CAAC,CACH,CACF,CACF,CAAC,CACDtH,UAAU,CAAE,CACVwB,GAAG,CAAE,sKAAsK,CAC3KvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,aAAa,CACnBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CACHuG,OAAO,CAACvG,KAAK,CAACyG,aAAa,CAACD,OAAO,CAACxG,KAAK,CAAEuB,SAAS,CAAE,CAAEmF,WAAW,CAAE,QAAS,CAAC,CAAC,CAAG,CACvF,CAAC,CACH,CACF,CACF,CAAC,CACDtH,UAAU,CAAE,CACVwB,GAAG,CAAE,sHAAsH,CAC3HvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,aAAa,CACnBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CACHuG,OAAO,CAACvG,KAAK,CAACyG,aAAa,CAACD,OAAO,CAACxG,KAAK,CAAEuB,SAAS,CAAE,CAAEmF,WAAW,CAAE,QAAS,CAAC,CAAC,CAAG,CACvF,CAAC,CACH,CACF,CACF,CAAC,CACDtH,UAAU,CAAE,CACVwB,GAAG,CAAE,yHAAyH,CAC9HvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,cAAc,CACpBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CACHuG,OAAO,CAACvG,KAAK,CAACyG,aAAa,CAACD,OAAO,CAACxG,KAAK,CAAEuB,SAAS,CAAE,CAAEmF,WAAW,CAAE,QAAS,CAAC,CAAC,EAAI,CACxF,CAAC,CACH,CACF,CACF,CAAC,CACDtH,UAAU,CAAE,CACVwB,GAAG,CAAE,kIAAkI,CACvIvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,cAAc,CACpBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACnC,CAAEvB,IAAI,CAAE,SAAS,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAC9B,KAAM,CAACoG,OAAO,CAAEC,OAAO,CAAC,CAAGrG,IAAkC,CAC7D,MAAO,CACLpB,IAAI,CAAE,SAAS,CACfiB,KAAK,CACHuG,OAAO,CAACvG,KAAK,CAACyG,aAAa,CAACD,OAAO,CAACxG,KAAK,CAAEuB,SAAS,CAAE,CAAEmF,WAAW,CAAE,QAAS,CAAC,CAAC,EAAI,CACxF,CAAC,CACH,CACF,CACF,CAAC,CACDtH,UAAU,CAAE,CACVwB,GAAG,CAAE,qIAAqI,CAC1IvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAC/D,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,SAAS,CACfoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAC7B,CAAEvB,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAC7B,CAAEvB,IAAI,CAAE,UAAU,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CAAEvB,IAAI,CAAE,UAAU,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACpC,CAAEvB,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAE9B,KAAM,CAACoD,CAAC,CAAEoD,CAAC,CAAEC,OAAO,CAAEC,OAAO,CAAEC,KAAK,CAAC,CAAG3G,IAAqC,CAE7E,MAAO,CACLpB,IAAI,CAAE,MAAM,CACZmC,KAAK,CAAE,CAAC,CAAEnC,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAE,SAAU,CAAC,CAAEuD,CAAC,CAAEoD,CAAC,CAAEC,OAAO,CAAEC,OAAO,CAAEC,KAAK,CAC7E,CAAC,CACH,CACF,CACF,CAAC,CACD1H,UAAU,CAAE,CACVwB,GAAG,CAAE,2BAA2B,CAChCvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,SAAU,CAAC,CAEtB,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,WAAW,CACjBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAC7B,CAAEvB,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAC7B,CAAEvB,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CACjC,CAAEvB,IAAI,CAAE,QAAQ,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CAAEvB,IAAI,CAAE,OAAO,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAClC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAE9B,KAAM,CAACoD,CAAC,CAAEoD,CAAC,CAAElF,KAAK,CAAEsF,MAAM,CAAED,KAAK,CAAC,CAAG3G,IAAqC,CAE1E,MAAO,CACLpB,IAAI,CAAE,MAAM,CACZmC,KAAK,CAAE,CAAC,CAAEnC,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAE,WAAY,CAAC,CAAEuD,CAAC,CAAEoD,CAAC,CAAElF,KAAK,CAAEsF,MAAM,CAAED,KAAK,CAC5E,CAAC,CACH,CACF,CACF,CAAC,CACD1H,UAAU,CAAE,CACVwB,GAAG,CAAE,4BAA4B,CACjCvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,QAAS,CAAC,CACjB,CAAEA,GAAG,CAAE,SAAU,CAAC,CAEtB,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,OAAO,CACboB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,KAAK,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAC/B,CAAEvB,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAC7B,CAAEvB,IAAI,CAAE,GAAG,CAAEuB,IAAI,CAAE,QAAS,CAAC,CAC9B,CACD,CAACY,IAAIA,CAACC,IAAI,CAAsB,CAG9B,KAAM,CAAC6G,GAAG,CAAEzD,CAAC,CAAEoD,CAAC,CAAC,CAAGxG,IAAoB,CAExC,MAAO,CACLpB,IAAI,CAAE,MAAM,CACZmC,KAAK,CAAE,CAAC,CAAEnC,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAE,OAAQ,CAAC,CAAEgH,GAAG,CAAEzD,CAAC,CAAEoD,CAAC,CACvD,CAAC,CACH,CACF,CACF,CAAC,CACDvH,UAAU,CAAE,CACVwB,GAAG,CAAE,yBAAyB,CAC9BvB,cAAc,CAAE,CACdmB,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEN,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEA,GAAG,CAAE,SAAU,CAAC,CAClF,CACF,CACF,CAAC,CACD,CACEzC,IAAI,CAAE,WAAW,CACjBoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CAAC,CAAElC,IAAI,CAAE,eAAgB,CAAC,CAAC,CACtC,CAACmC,IAAIA,CAACC,IAAI,CAAEC,SAAS,CAAsB,CACzC,KAAM,CAAC6G,YAAY,CAAC,CAAG9G,IAAe,CACtC,MAAO,CAAAxC,oBAAoB,CAACuJ,MAAM,CAACD,YAAY,CAAE7G,SAAS,CAAC,CAC7D,CACF,CACF,CAAC,CACDhB,UAAU,CAAE,CACVwB,GAAG,CAAE,0BAA0B,CAC/BvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,OAAQ,CAAC,CAAC,CACpDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAEP,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAC,CACrE,CACF,CAAC,CACDoG,eAAe,CAAE,CACnB,CACF,CAAC,CACD,CACEpJ,IAAI,CAAE,SAAS,CACfoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,WAAW,CAAEuB,IAAI,CAAE,WAAY,CAAC,CACxC,CAAEvB,IAAI,CAAE,eAAe,CAAEuB,IAAI,CAAE,IAAK,CAAC,CACtC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAEC,SAAS,CAAsB,CACzC,KAAM,CAACgH,cAAc,CAAEC,MAAM,CAAC,CAAGlH,IAAiC,CAElE,KAAM,CAAAmH,SAAS,CAAGF,cAAc,CAACG,SAAS,CAC1CD,SAAS,CAACE,MAAM,CAAIC,KAAK,EAAKrH,SAAS,CAACO,IAAI,CAAC0G,MAAM,CAAE,CAACI,KAAK,CAAC,CAAC,CAC7D,MAAO,CAAE1I,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAE,EAAG,CAAC,CACpC,CACF,CACF,CAAC,CACD9B,UAAU,CAAE,CACVwB,GAAG,CAAE,mDAAmD,CACxDvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,OAAQ,CAAC,CAAC,CACpDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAC,CAC5C,CAAEP,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAEP,GAAG,CAAE,SAAU,CAAC,CAAE,CAAC,CAC/D,CAAEA,GAAG,CAAE,OAAQ,CAAC,CAEpB,CACF,CAAC,CACD2G,eAAe,CAAE,CAAC,CAClBO,GAAG,CAAE,IACP,CACF,CAAC,CACD,CACE3J,IAAI,CAAE,SAAS,CACfoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,WAAW,CAAEuB,IAAI,CAAE,WAAY,CAAC,CACxC,CAAEvB,IAAI,CAAE,eAAe,CAAEuB,IAAI,CAAE,IAAK,CAAC,CACtC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAEC,SAAS,CAAsB,CACzC,KAAM,CAACgH,cAAc,CAAEO,MAAM,CAAC,CAAGxH,IAAiC,CAElE,KAAM,CAAAmH,SAAS,CAAGF,cAAc,CAACG,SAAS,CAC1CD,SAAS,CAACM,MAAM,CAAIH,KAAK,EAAKrH,SAAS,CAACO,IAAI,CAACgH,MAAM,CAAE,CAACF,KAAK,CAAC,CAAC,CAE7D,MAAO,CAAE1I,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAE,EAAG,CAAC,CACpC,CACF,CACF,CAAC,CACD9B,UAAU,CAAE,CACVwB,GAAG,CAAE,6GAA6G,CAClHvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,OAAQ,CAAC,CAAC,CACpDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAC,CAC5C,CAAEP,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAEA,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAC,CAC7D,CAAEP,GAAG,CAAE,OAAQ,CAAC,CAEpB,CACF,CAAC,CACD2G,eAAe,CAAE,CAAC,CAClBO,GAAG,CAAE,IACP,CACF,CAAC,CACD,CACE3J,IAAI,CAAE,QAAQ,CACdoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,CACT,CAAElC,IAAI,CAAE,WAAW,CAAEuB,IAAI,CAAE,WAAY,CAAC,CACxC,CAAEvB,IAAI,CAAE,cAAc,CAAEuB,IAAI,CAAE,IAAK,CAAC,CACrC,CACD,CAACY,IAAIA,CAACC,IAAI,CAAEC,SAAS,CAAsB,CACzC,KAAM,CAACgH,cAAc,CAAES,KAAK,CAAC,CAAG1H,IAAiC,CAEjE,KAAM,CAAAmH,SAAS,CAAGF,cAAc,CAACG,SAAS,CAC1CD,SAAS,CAACQ,KAAK,CAAG,CAACL,KAAK,CAAEM,GAAG,GAC3B3H,SAAS,CAACO,IAAI,CAACkH,KAAK,CAAE,CAACJ,KAAK,CAAE,CAAE1I,IAAI,CAAE,QAAQ,CAAEiB,KAAK,CAAE+H,GAAI,CAAC,CAAC,CAAC,CAChE,MAAO,CAAEhJ,IAAI,CAAE,MAAM,CAAEmC,KAAK,CAAE,EAAG,CAAC,CACpC,CACF,CACF,CAAC,CACD9B,UAAU,CAAE,CACVwB,GAAG,CAAE,0EAA0E,CAC/EvB,cAAc,CAAE,CACdwB,MAAM,CAAE,CAAC,CAAE9B,IAAI,CAAE,mBAAmB,CAAEG,EAAE,CAAE,OAAQ,CAAC,CAAC,CACpDgB,IAAI,CAAE,CACJM,GAAG,CAAE,UAAU,CACfM,EAAE,CAAE,CACF,CAAEN,GAAG,CAAE,WAAW,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAC,CAC5C,CAAEP,GAAG,CAAE,UAAU,CAAEM,EAAE,CAAE,CAAC,CAAEC,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAEP,GAAG,CAAE,QAAS,CAAC,CAAE,CAAEO,GAAG,CAAE,OAAQ,CAAC,CAAE,CAAC,CAChF,CAAEP,GAAG,CAAE,OAAQ,CAAC,CAEpB,CACF,CAAC,CACD2G,eAAe,CAAE,CAAC,CAClBO,GAAG,CAAE,IACP,CACF,CAAC,CACF,CAAC,CAEF,MAAO,MAAM,CAAAM,qBAAkC,CAAGpK,OAAO,CAAC,CACxD,CACEG,IAAI,CAAE,MAAM,CACZoB,IAAI,CAAE,CACJa,KAAK,CAAE,CACLjB,IAAI,CAAE,IAAI,CACVkB,SAAS,CAAE,EAAE,CACb,CAACC,IAAIA,CAAA,CAAkC,CACrC,MAAO,CACLnB,IAAI,CAAE,MAAM,CACZmC,KAAK,CAAE,EACT,CAAC,CACH,CACF,CACF,CACF,CAAC,CACF,CAAC,CAEF,MAAO,MAAM,CAAA+G,kBAA+B,CAAGjK,SAAS,CACtDgK,qBAAqB,CACrBjI,uBACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}