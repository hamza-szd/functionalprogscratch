{"ast":null,"code":"import{functionParamTypes,functionResultType,hasTag,isForallType,isTypeNameBinding,isTypeNameHole,isTypeVar,typeParams}from\"./type\";export function serializeType(t){if(isTypeVar(t)){return\"#\"+t.var;}else if(isTypeNameBinding(t)){return\"#\"+t.id;}else if(isTypeNameHole(t)){return\"·\";}else if(isForallType(t)){return\"(All (\"+t.forall.map(serializeType).join(\" \")+\") \"+serializeType(t.body)+\")\";}else{const params=typeParams(t);if(params.length===0){return t.tag;}else{return\"(\"+t.tag+\" \"+params.map(serializeType).join(\" \")+\")\";}}}export function prettyPrintType(t){if(isTypeVar(t)){return\"#\"+t.var;}else if(isTypeNameBinding(t)){return\"#\"+t.id;}else if(isTypeNameHole(t)){return\"·\";}else if(isForallType(t)){return\"∀\"+t.forall.map(prettyPrintType).join(\" \")+\". \"+prettyPrintType(t.body);}else{const params=typeParams(t);if(params.length===0){return t.tag;}else if(hasTag(t,\"Function\")){return\"(\"+functionParamTypes(t).map(prettyPrintType).join(\" \")+\" ➜ \"+prettyPrintType(functionResultType(t))+\")\";}else if(hasTag(t,\"Function*\")){const paramTypes=functionParamTypes(t);return\"(\"+paramTypes.slice(0,-1).map(prettyPrintType).join(\" \")+(paramTypes.length>1?\" \":\"\")+prettyPrintType(paramTypes.at(-1))+\"... ➜ \"+prettyPrintType(functionResultType(t))+\")\";}else{return\"(\"+t.tag+\" \"+params.map(prettyPrintType).join(\" \")+\")\";}}}","map":{"version":3,"names":["functionParamTypes","functionResultType","hasTag","isForallType","isTypeNameBinding","isTypeNameHole","isTypeVar","typeParams","serializeType","t","var","id","forall","map","join","body","params","length","tag","prettyPrintType","paramTypes","slice","at"],"sources":["/Users/hamzashahzad/Desktop/resume_projects/sparkground/src/typechecker/serialize.ts"],"sourcesContent":["import {\n  Type,\n  functionParamTypes,\n  functionResultType,\n  hasTag,\n  isForallType,\n  isTypeNameBinding,\n  isTypeNameHole,\n  isTypeVar,\n  typeParams,\n} from \"./type\";\n\nexport function serializeType(t: Type): string {\n  if (isTypeVar(t)) {\n    return \"#\" + t.var;\n  } else if (isTypeNameBinding(t)) {\n    return \"#\" + t.id;\n  } else if (isTypeNameHole(t)) {\n    return \"·\";\n  } else if (isForallType(t)) {\n    return \"(All (\" + t.forall.map(serializeType).join(\" \") + \") \" + serializeType(t.body) + \")\";\n  } else {\n    const params = typeParams(t);\n\n    if (params.length === 0) {\n      return t.tag;\n    } else {\n      return \"(\" + t.tag + \" \" + params.map(serializeType).join(\" \") + \")\";\n    }\n  }\n}\n\nexport function prettyPrintType(t: Type): string {\n  if (isTypeVar(t)) {\n    return \"#\" + t.var;\n  } else if (isTypeNameBinding(t)) {\n    return \"#\" + t.id;\n  } else if (isTypeNameHole(t)) {\n    return \"·\";\n  } else if (isForallType(t)) {\n    return \"∀\" + t.forall.map(prettyPrintType).join(\" \") + \". \" + prettyPrintType(t.body);\n  } else {\n    const params = typeParams(t);\n\n    if (params.length === 0) {\n      return t.tag;\n    } else if (hasTag(t, \"Function\")) {\n      return (\n        \"(\" +\n        functionParamTypes(t).map(prettyPrintType).join(\" \") +\n        \" ➜ \" +\n        prettyPrintType(functionResultType(t)) +\n        \")\"\n      );\n    } else if (hasTag(t, \"Function*\")) {\n      const paramTypes = functionParamTypes(t);\n      return (\n        \"(\" +\n        paramTypes.slice(0, -1).map(prettyPrintType).join(\" \") +\n        (paramTypes.length > 1 ? \" \" : \"\") +\n        prettyPrintType(paramTypes.at(-1)!) +\n        \"... ➜ \" +\n        prettyPrintType(functionResultType(t)) +\n        \")\"\n      );\n    } else {\n      return \"(\" + t.tag + \" \" + params.map(prettyPrintType).join(\" \") + \")\";\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}