{"ast":null,"code":"import{isHole}from\"../editor/trees/tree\";import{uniqueId}from\"lodash\";export function getIdentifier(varSlot){return isHole(varSlot)?uniqueId():varSlot.id;}export function getPrettyName(varSlot){return isHole(varSlot)?varSlot.value:varSlot.id;}export function getTypeAnnotation(varSlot){return isHole(varSlot)?undefined:varSlot.type;}","map":{"version":3,"names":["isHole","uniqueId","getIdentifier","varSlot","id","getPrettyName","value","getTypeAnnotation","undefined","type"],"sources":["/Users/hamzashahzad/Desktop/resume_projects/sparkground/src/expr/expr.ts"],"sourcesContent":["import { isHole } from \"../editor/trees/tree\";\nimport { Datum } from \"../datum/datum\";\nimport { DefinitionAttributes } from \"./attributes\";\nimport { Type } from \"../typechecker/type\";\nimport { uniqueId } from \"lodash\";\n\nexport type Expr = { attributes?: DefinitionAttributes } & (\n  | NameBinding\n  | Datum\n  | TypeExpr\n  | Var\n  | Call\n  | Struct\n  | Define\n  | Let\n  | Letrec\n  | Lambda\n  | Sequence\n  | And\n  | Or\n  | If\n  | Cond\n);\n\nexport type Hole = {\n  kind: \"Symbol\";\n  value: \"Â·\";\n};\nexport type VarSlot = Hole | NameBinding;\nexport function getIdentifier(varSlot: VarSlot) {\n  return isHole(varSlot) ? uniqueId() : varSlot.id;\n}\nexport function getPrettyName(varSlot: VarSlot) {\n  return isHole(varSlot) ? varSlot.value : varSlot.id;\n}\nexport function getTypeAnnotation(varSlot: VarSlot): Type | undefined {\n  return isHole(varSlot) ? undefined : varSlot.type;\n}\n\nexport type NameBinding = {\n  kind: \"name-binding\";\n  id: string;\n  type?: Type;\n};\n\nexport type TypeExpr = {\n  kind: \"type\";\n  type: Type;\n};\n\nexport type Struct = {\n  kind: \"struct\";\n  name: VarSlot;\n  fields: VarSlot[];\n};\n\nexport type Var = {\n  kind: \"var\";\n  id: string;\n};\n\nexport type Call = {\n  kind: \"call\";\n  called: Expr;\n  args: Expr[];\n};\n\nexport type Define = {\n  kind: \"define\";\n  name: VarSlot;\n  value: Expr;\n};\n\nexport type Let = {\n  kind: \"let\";\n  bindings: [name: VarSlot, value: Expr][];\n  body: Expr;\n};\nexport type Letrec = {\n  kind: \"letrec\";\n  bindings: [name: VarSlot, value: Expr][];\n  body: Expr;\n};\n\nexport type Lambda = {\n  kind: \"lambda\";\n  params: VarSlot[];\n  body: Expr;\n  returnType?: Type;\n};\n\nexport type Sequence = {\n  kind: \"sequence\";\n  exprs: Expr[];\n};\n\nexport type And = {\n  kind: \"and\";\n  args: Expr[];\n};\nexport type Or = {\n  kind: \"or\";\n  args: Expr[];\n};\nexport type If = {\n  kind: \"if\";\n  if: Expr;\n  then: Expr;\n  else: Expr;\n};\nexport type Cond = {\n  kind: \"cond\";\n  cases: [condition: Expr, value: Expr][];\n};\n"],"mappings":"AAAA,OAASA,MAAM,KAAQ,sBAAsB,CAI7C,OAASC,QAAQ,KAAQ,QAAQ,CAyBjC,MAAO,SAAS,CAAAC,aAAaA,CAACC,OAAgB,CAAE,CAC9C,MAAO,CAAAH,MAAM,CAACG,OAAO,CAAC,CAAGF,QAAQ,CAAC,CAAC,CAAGE,OAAO,CAACC,EAAE,CAClD,CACA,MAAO,SAAS,CAAAC,aAAaA,CAACF,OAAgB,CAAE,CAC9C,MAAO,CAAAH,MAAM,CAACG,OAAO,CAAC,CAAGA,OAAO,CAACG,KAAK,CAAGH,OAAO,CAACC,EAAE,CACrD,CACA,MAAO,SAAS,CAAAG,iBAAiBA,CAACJ,OAAgB,CAAoB,CACpE,MAAO,CAAAH,MAAM,CAACG,OAAO,CAAC,CAAGK,SAAS,CAAGL,OAAO,CAACM,IAAI,CACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}