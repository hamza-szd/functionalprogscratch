{"ast":null,"code":"import{serializeType}from\"./serialize\";export function describeTypecheckError(e){switch(e.tag){case\"DuplicateDefinition\":return`duplicate definition of ${e.id}`;case\"UnboundVariable\":return`unbound variable: ${e.v.id}`;case\"NotCallable\":return`expression type is not callable: ${serializeType(e.calledType)}`;case\"InvalidAssignmentToType\":return`invalid assignment to type ${serializeType(e.type)}`;case\"InvalidAssignment\":return`invalid assignment`;case\"ArityMismatch\":return`wrong number of arguments: got ${e.attemptedCallArity}, expecting ${e.arity}`;case\"VariadicArityMismatch\":return!e.minArity?`wrong number of arguments: got ${e.attemptedCallArity}, expecting at most ${e.maxArity}`:!e.maxArity?`wrong number of arguments: got ${e.attemptedCallArity}, expecting at least ${e.minArity}`:`wrong number of arguments: got ${e.attemptedCallArity}, expecting between ${e.minArity} and ${e.maxArity}`;}}","map":{"version":3,"names":["serializeType","describeTypecheckError","e","tag","id","v","calledType","type","attemptedCallArity","arity","minArity","maxArity"],"sources":["/Users/hamzashahzad/Desktop/resume_projects/sparkground/src/typechecker/errors.ts"],"sourcesContent":["import { Var, Expr, Call, NameBinding, Define } from \"../expr/expr\";\nimport { serializeType } from \"./serialize\";\nimport { Type } from \"./type\";\n\nexport type TypecheckError =\n  | DuplicateDefinition\n  | UnboundVariable\n  | NotCallable\n  | InvalidAssignmentToType\n  | InvalidAssignment\n  | ArityMismatch\n  | VariadicArityMismatch;\n\nexport type DuplicateDefinition = {\n  tag: \"DuplicateDefinition\";\n  id: string;\n};\n\nexport type UnboundVariable = {\n  tag: \"UnboundVariable\";\n  v: Var | NameBinding;\n};\n\nexport type NotCallable = {\n  tag: \"NotCallable\";\n  call: Call;\n  calledType: Type;\n};\n\nexport type InvalidAssignmentToType = {\n  tag: \"InvalidAssignmentToType\";\n  expr: Expr;\n  type: Type;\n};\n\nexport type InvalidAssignment = {\n  tag: \"InvalidAssignment\";\n  expr: Expr;\n};\n\nexport type ArityMismatch = {\n  tag: \"ArityMismatch\";\n  call: Call;\n  calledType: Type;\n  arity: number;\n  attemptedCallArity: number;\n};\n\nexport type VariadicArityMismatch = {\n  tag: \"VariadicArityMismatch\";\n  call: Call;\n  calledType: Type;\n  minArity?: number;\n  maxArity?: number;\n  attemptedCallArity: number;\n};\n\nexport function describeTypecheckError(e: TypecheckError): string {\n  switch (e.tag) {\n    case \"DuplicateDefinition\":\n      return `duplicate definition of ${e.id}`;\n    case \"UnboundVariable\":\n      return `unbound variable: ${e.v.id}`;\n    case \"NotCallable\":\n      return `expression type is not callable: ${serializeType(e.calledType)}`;\n    case \"InvalidAssignmentToType\":\n      return `invalid assignment to type ${serializeType(e.type)}`;\n    case \"InvalidAssignment\":\n      return `invalid assignment`;\n    case \"ArityMismatch\":\n      return `wrong number of arguments: got ${e.attemptedCallArity}, expecting ${e.arity}`;\n    case \"VariadicArityMismatch\":\n      return !e.minArity\n        ? `wrong number of arguments: got ${e.attemptedCallArity}, expecting at most ${e.maxArity}`\n        : !e.maxArity\n          ? `wrong number of arguments: got ${e.attemptedCallArity}, expecting at least ${e.minArity}`\n          : `wrong number of arguments: got ${e.attemptedCallArity}, expecting between ${e.minArity} and ${e.maxArity}`;\n  }\n}\n"],"mappings":"AACA,OAASA,aAAa,KAAQ,aAAa,CAwD3C,MAAO,SAAS,CAAAC,sBAAsBA,CAACC,CAAiB,CAAU,CAChE,OAAQA,CAAC,CAACC,GAAG,EACX,IAAK,qBAAqB,CACxB,MAAO,2BAA2BD,CAAC,CAACE,EAAE,EAAE,CAC1C,IAAK,iBAAiB,CACpB,MAAO,qBAAqBF,CAAC,CAACG,CAAC,CAACD,EAAE,EAAE,CACtC,IAAK,aAAa,CAChB,MAAO,oCAAoCJ,aAAa,CAACE,CAAC,CAACI,UAAU,CAAC,EAAE,CAC1E,IAAK,yBAAyB,CAC5B,MAAO,8BAA8BN,aAAa,CAACE,CAAC,CAACK,IAAI,CAAC,EAAE,CAC9D,IAAK,mBAAmB,CACtB,MAAO,oBAAoB,CAC7B,IAAK,eAAe,CAClB,MAAO,kCAAkCL,CAAC,CAACM,kBAAkB,eAAeN,CAAC,CAACO,KAAK,EAAE,CACvF,IAAK,uBAAuB,CAC1B,MAAO,CAACP,CAAC,CAACQ,QAAQ,CACd,kCAAkCR,CAAC,CAACM,kBAAkB,uBAAuBN,CAAC,CAACS,QAAQ,EAAE,CACzF,CAACT,CAAC,CAACS,QAAQ,CACT,kCAAkCT,CAAC,CAACM,kBAAkB,wBAAwBN,CAAC,CAACQ,QAAQ,EAAE,CAC1F,kCAAkCR,CAAC,CAACM,kBAAkB,uBAAuBN,CAAC,CAACQ,QAAQ,QAAQR,CAAC,CAACS,QAAQ,EAAE,CACrH,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}