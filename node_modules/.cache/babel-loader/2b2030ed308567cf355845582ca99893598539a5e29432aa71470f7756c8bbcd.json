{"ast":null,"code":"import Button from\"react-bootstrap/Button\";import Modal from\"react-bootstrap/Modal\";import Editor from\"@monaco-editor/react\";import{nodeAtIndexPath}from\"./trees/tree\";import{serializeExpr}from\"./trees/serialize\";import{useEffect,useState}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function CodeEditorModal(_ref){let{indexPath,onClose}=_ref;const[newSource,setNewSource]=useState();useEffect(()=>{setNewSource(indexPath?serializeExpr(nodeAtIndexPath(indexPath)):undefined);},[indexPath]);return/*#__PURE__*/_jsxs(Modal,{show:!!indexPath,onHide:()=>onClose(),centered:true,backdropClassName:\"modal-backdrop\",children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Edit as Text\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsx(Editor,{height:\"40vh\",language:\"scheme\",options:{minimap:{enabled:false},overviewRulerLanes:0,bracketPairColorization:{enabled:true}},value:newSource,onChange:setNewSource,onMount:(editor,monaco)=>{editor.addAction({id:\"sparkground-save-expression\",label:\"Sparkground: Save Expression\",keybindings:[monaco.KeyMod.CtrlCmd|monaco.KeyCode.Enter],run:editor=>{onClose(editor.getValue());}});}})}),/*#__PURE__*/_jsxs(Modal.Footer,{children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:()=>onClose(),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:()=>onClose(newSource),children:\"Update\"})]})]});}","map":{"version":3,"names":["Button","Modal","Editor","nodeAtIndexPath","serializeExpr","useEffect","useState","jsx","_jsx","jsxs","_jsxs","CodeEditorModal","_ref","indexPath","onClose","newSource","setNewSource","undefined","show","onHide","centered","backdropClassName","children","Header","closeButton","Title","Body","height","language","options","minimap","enabled","overviewRulerLanes","bracketPairColorization","value","onChange","onMount","editor","monaco","addAction","id","label","keybindings","KeyMod","CtrlCmd","KeyCode","Enter","run","getValue","Footer","variant","onClick"],"sources":["/Users/hamzashahzad/Desktop/resume_projects/sparkground/src/editor/CodeEditorModal.tsx"],"sourcesContent":["import Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Editor from \"@monaco-editor/react\";\n\nimport { TreeIndexPath, nodeAtIndexPath } from \"./trees/tree\";\nimport { serializeExpr } from \"./trees/serialize\";\nimport { useEffect, useState } from \"react\";\n\nexport type Props = {\n  indexPath?: TreeIndexPath;\n\n  onClose: (newSource?: string) => void;\n};\n\nexport default function CodeEditorModal({ indexPath, onClose }: Props) {\n  const [newSource, setNewSource] = useState<string>();\n\n  useEffect(() => {\n    setNewSource(indexPath ? serializeExpr(nodeAtIndexPath(indexPath)) : undefined);\n  }, [indexPath]);\n\n  return (\n    <Modal show={!!indexPath} onHide={() => onClose()} centered backdropClassName=\"modal-backdrop\">\n      <Modal.Header closeButton>\n        <Modal.Title>Edit as Text</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Editor\n          height=\"40vh\"\n          language=\"scheme\"\n          options={{\n            minimap: { enabled: false },\n            overviewRulerLanes: 0,\n            bracketPairColorization: { enabled: true },\n          }}\n          value={newSource}\n          onChange={setNewSource}\n          onMount={(editor, monaco) => {\n            editor.addAction({\n              id: \"sparkground-save-expression\",\n              label: \"Sparkground: Save Expression\",\n              keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter],\n              run: (editor) => {\n                onClose(editor.getValue());\n              },\n            });\n          }}\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={() => onClose()}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={() => onClose(newSource)}>\n          Update\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n"],"mappings":"AAAA,MAAO,CAAAA,MAAM,KAAM,wBAAwB,CAC3C,MAAO,CAAAC,KAAK,KAAM,uBAAuB,CACzC,MAAO,CAAAC,MAAM,KAAM,sBAAsB,CAEzC,OAAwBC,eAAe,KAAQ,cAAc,CAC7D,OAASC,aAAa,KAAQ,mBAAmB,CACjD,OAASC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAQ5C,cAAe,SAAS,CAAAC,eAAeA,CAAAC,IAAA,CAAgC,IAA/B,CAAEC,SAAS,CAAEC,OAAe,CAAC,CAAAF,IAAA,CACnE,KAAM,CAACG,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAS,CAAC,CAEpDD,SAAS,CAAC,IAAM,CACdW,YAAY,CAACH,SAAS,CAAGT,aAAa,CAACD,eAAe,CAACU,SAAS,CAAC,CAAC,CAAGI,SAAS,CAAC,CACjF,CAAC,CAAE,CAACJ,SAAS,CAAC,CAAC,CAEf,mBACEH,KAAA,CAACT,KAAK,EAACiB,IAAI,CAAE,CAAC,CAACL,SAAU,CAACM,MAAM,CAAEA,CAAA,GAAML,OAAO,CAAC,CAAE,CAACM,QAAQ,MAACC,iBAAiB,CAAC,gBAAgB,CAAAC,QAAA,eAC5Fd,IAAA,CAACP,KAAK,CAACsB,MAAM,EAACC,WAAW,MAAAF,QAAA,cACvBd,IAAA,CAACP,KAAK,CAACwB,KAAK,EAAAH,QAAA,CAAC,cAAY,CAAa,CAAC,CAC3B,CAAC,cACfd,IAAA,CAACP,KAAK,CAACyB,IAAI,EAAAJ,QAAA,cACTd,IAAA,CAACN,MAAM,EACLyB,MAAM,CAAC,MAAM,CACbC,QAAQ,CAAC,QAAQ,CACjBC,OAAO,CAAE,CACPC,OAAO,CAAE,CAAEC,OAAO,CAAE,KAAM,CAAC,CAC3BC,kBAAkB,CAAE,CAAC,CACrBC,uBAAuB,CAAE,CAAEF,OAAO,CAAE,IAAK,CAC3C,CAAE,CACFG,KAAK,CAAEnB,SAAU,CACjBoB,QAAQ,CAAEnB,YAAa,CACvBoB,OAAO,CAAEA,CAACC,MAAM,CAAEC,MAAM,GAAK,CAC3BD,MAAM,CAACE,SAAS,CAAC,CACfC,EAAE,CAAE,6BAA6B,CACjCC,KAAK,CAAE,8BAA8B,CACrCC,WAAW,CAAE,CAACJ,MAAM,CAACK,MAAM,CAACC,OAAO,CAAGN,MAAM,CAACO,OAAO,CAACC,KAAK,CAAC,CAC3DC,GAAG,CAAGV,MAAM,EAAK,CACfvB,OAAO,CAACuB,MAAM,CAACW,QAAQ,CAAC,CAAC,CAAC,CAC5B,CACF,CAAC,CAAC,CACJ,CAAE,CACH,CAAC,CACQ,CAAC,cACbtC,KAAA,CAACT,KAAK,CAACgD,MAAM,EAAA3B,QAAA,eACXd,IAAA,CAACR,MAAM,EAACkD,OAAO,CAAC,WAAW,CAACC,OAAO,CAAEA,CAAA,GAAMrC,OAAO,CAAC,CAAE,CAAAQ,QAAA,CAAC,QAEtD,CAAQ,CAAC,cACTd,IAAA,CAACR,MAAM,EAACkD,OAAO,CAAC,SAAS,CAACC,OAAO,CAAEA,CAAA,GAAMrC,OAAO,CAACC,SAAS,CAAE,CAAAO,QAAA,CAAC,QAE7D,CAAQ,CAAC,EACG,CAAC,EACV,CAAC,CAEZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}