{"ast":null,"code":"import _classPrivateFieldLooseBase from\"/Users/hamzashahzad/Desktop/resume_projects/sparkground/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";import _classPrivateFieldLooseKey from\"/Users/hamzashahzad/Desktop/resume_projects/sparkground/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";import{cloneDeep}from\"lodash\";import{hole,isAtomic,isHoleForEditor,isSameOrAncestor,nodeAtIndexPath,setChildAtIndex}from\"./tree\";import{isTypeNameBinding}from\"../../typechecker/type\";export const LibraryPageID=-1;export const InvisiblePageID=-2;const DefaultMeta={pages:[{id:0,name:\"Main\"}]};var _trees=/*#__PURE__*/_classPrivateFieldLooseKey(\"trees\");var _nextID=/*#__PURE__*/_classPrivateFieldLooseKey(\"nextID\");var _nextZIndex=/*#__PURE__*/_classPrivateFieldLooseKey(\"nextZIndex\");var _destinationPageID=/*#__PURE__*/_classPrivateFieldLooseKey(\"destinationPageID\");export class Trees{constructor(){Object.defineProperty(this,_destinationPageID,{value:_destinationPageID2});Object.defineProperty(this,_trees,{writable:true,value:[]});Object.defineProperty(this,_nextID,{writable:true,value:1});Object.defineProperty(this,_nextZIndex,{writable:true,value:1});this.meta={...DefaultMeta};}list(){return[..._classPrivateFieldLooseBase(this,_trees)[_trees]];}byID(id){return _classPrivateFieldLooseBase(this,_trees)[_trees].find(tree=>tree.id===id);}addNew(root,location,page){const tree={id:`${_classPrivateFieldLooseBase(this,_nextID)[_nextID]++}`,root,location:{...location},page,zIndex:_classPrivateFieldLooseBase(this,_nextZIndex)[_nextZIndex]++};_classPrivateFieldLooseBase(this,_trees)[_trees].push(tree);return tree;}remove(tree){_classPrivateFieldLooseBase(this,_trees)[_trees]=_classPrivateFieldLooseBase(this,_trees)[_trees].filter(tree_=>tree_.id!==tree.id);}reset(){_classPrivateFieldLooseBase(this,_trees)[_trees]=[];this.meta={...DefaultMeta};}bringToFront(tree){tree.zIndex=_classPrivateFieldLooseBase(this,_nextZIndex)[_nextZIndex]++;}moveExprInTree(_ref,_ref2,displaceTo){let{tree:sourceTree,path:sourceIndexPath}=_ref;let{tree:destinationTree,path:destinationIndexPath}=_ref2;if(destinationIndexPath.length===0){// Trying to replace root of a tree\nreturn;}if(isSameOrAncestor({tree:sourceTree,path:sourceIndexPath},{tree:destinationTree,path:destinationIndexPath})){// Trying to move an expression such that it becomes a descendant of itself\nreturn;}const source=nodeForIndexPathInTree(sourceTree,sourceIndexPath);const destination=nodeForIndexPathInTree(destinationTree,destinationIndexPath);const destinationParent=nodeForIndexPathInTree(destinationTree,destinationIndexPath.slice(0,-1));if(source===sourceTree.root){this.remove(sourceTree);}else{const sourceParent=nodeForIndexPathInTree(sourceTree,sourceIndexPath.slice(0,-1));setChildAtIndex(sourceParent,sourceIndexPath.at(-1),hole);}setChildAtIndex(destinationParent,destinationIndexPath.at(-1),source);if(!isHoleForEditor(destination)){this.addNew(destination,displaceTo,_classPrivateFieldLooseBase(this,_destinationPageID)[_destinationPageID](destinationTree.page));}}copyExprInTree(_ref3,_ref4,displaceTo){let{tree:sourceTree,path:sourceIndexPath}=_ref3;let{tree:destinationTree,path:destinationIndexPath}=_ref4;if(destinationIndexPath.length===0){// Trying to replace root of a tree\nreturn;}const source=nodeForIndexPathInTree(sourceTree,sourceIndexPath);const destination=nodeForIndexPathInTree(destinationTree,destinationIndexPath);const destinationParent=nodeForIndexPathInTree(destinationTree,destinationIndexPath.slice(0,-1));if(destination===source||destination===destinationTree.root)return;setChildAtIndex(destinationParent,destinationIndexPath.at(-1),cloneExpr(source));if(!isHoleForEditor(destination)){this.addNew(destination,displaceTo,_classPrivateFieldLooseBase(this,_destinationPageID)[_destinationPageID](destinationTree.page));}}orphanExpr(_ref5,placeAt,copy){let{tree,path}=_ref5;const expr=nodeForIndexPathInTree(tree,path);if(isHoleForEditor(expr))return tree;const parent=nodeForIndexPathInTree(tree,path.slice(0,-1));if(copy){return this.addNew(cloneExpr(expr),placeAt,_classPrivateFieldLooseBase(this,_destinationPageID)[_destinationPageID](tree.page));}if(path.length===0||isAtomic(parent)){// expr is already the root of a tree\ntree.location=placeAt;return tree;}setChildAtIndex(parent,path.at(-1),hole);return this.addNew(expr,placeAt,_classPrivateFieldLooseBase(this,_destinationPageID)[_destinationPageID](tree.page));}deleteExpr(_ref6){let{tree,path}=_ref6;const expr=nodeForIndexPathInTree(tree,path);if(isHoleForEditor(expr))return;const exprParent=nodeForIndexPathInTree(tree,path.slice(0,-1));if(path.length===0||isAtomic(exprParent)){// expr is the root of its tree\nthis.remove(tree);}else{setChildAtIndex(exprParent,path.at(-1),hole);}}replaceExpr(indexPath,newNode){if(!indexPath.path.length){indexPath.tree.root=newNode;}else{setChildAtIndex(nodeAtIndexPath({tree:indexPath.tree,path:indexPath.path.slice(0,-1)}),indexPath.path.at(-1),newNode);}}}function _destinationPageID2(proposedID){var _this$meta$currentPag;return proposedID>=0?proposedID:(_this$meta$currentPag=this.meta.currentPageID)!==null&&_this$meta$currentPag!==void 0?_this$meta$currentPag:0;}function nodeForIndexPathInTree(tree,path){return nodeAtIndexPath({tree,path});}function cloneExpr(expr){let clone=cloneDeep(expr);switch(clone.kind){case\"name-binding\":clone={...clone,kind:\"var\"};break;case\"type\":{const{type}=clone;if(isTypeNameBinding(type)){clone={...clone,type:{var:type.id}};}}}return clone;}","map":{"version":3,"names":["cloneDeep","hole","isAtomic","isHoleForEditor","isSameOrAncestor","nodeAtIndexPath","setChildAtIndex","isTypeNameBinding","LibraryPageID","InvisiblePageID","DefaultMeta","pages","id","name","_trees","_classPrivateFieldLooseKey","_nextID","_nextZIndex","_destinationPageID","Trees","constructor","Object","defineProperty","value","_destinationPageID2","writable","meta","list","_classPrivateFieldLooseBase","byID","find","tree","addNew","root","location","page","zIndex","push","remove","filter","tree_","reset","bringToFront","moveExprInTree","_ref","_ref2","displaceTo","sourceTree","path","sourceIndexPath","destinationTree","destinationIndexPath","length","source","nodeForIndexPathInTree","destination","destinationParent","slice","sourceParent","at","copyExprInTree","_ref3","_ref4","cloneExpr","orphanExpr","_ref5","placeAt","copy","expr","parent","deleteExpr","_ref6","exprParent","replaceExpr","indexPath","newNode","proposedID","_this$meta$currentPag","currentPageID","clone","kind","type","var"],"sources":["/Users/hamzashahzad/Desktop/resume_projects/sparkground/src/editor/trees/trees.ts"],"sourcesContent":["import { cloneDeep } from \"lodash\";\nimport { Expr } from \"../../expr/expr\";\nimport {\n  TreeIndexPath,\n  hole,\n  isAtomic,\n  isHoleForEditor,\n  isSameOrAncestor,\n  nodeAtIndexPath,\n  setChildAtIndex,\n} from \"./tree\";\nimport { TypeVar, isTypeNameBinding } from \"../../typechecker/type\";\nimport { ProjectMeta } from \"../../project-meta\";\n\nexport type Point = {\n  x: number;\n  y: number;\n};\n\nexport type PageID = number;\nexport const LibraryPageID = -1;\nexport const InvisiblePageID = -2;\n\nexport type Page = {\n  id: PageID;\n  name: string;\n};\n\nexport type Tree<Root extends Expr = Expr> = {\n  id: string;\n  root: Root;\n  location: Point;\n  page: PageID;\n  zIndex: number;\n};\n\nconst DefaultMeta = { pages: [{ id: 0, name: \"Main\" }] };\n\nexport class Trees {\n  #trees: Tree[] = [];\n  #nextID = 1;\n  #nextZIndex = 1;\n\n  meta: ProjectMeta = { ...DefaultMeta };\n\n  list(): Tree[] {\n    return [...this.#trees];\n  }\n\n  byID(id: string): Tree | undefined {\n    return this.#trees.find((tree) => tree.id === id);\n  }\n\n  addNew(root: Expr, location: Point, page: PageID): Tree {\n    const tree: Tree = {\n      id: `${this.#nextID++}`,\n      root,\n      location: { ...location },\n      page,\n      zIndex: this.#nextZIndex++,\n    };\n    this.#trees.push(tree);\n    return tree;\n  }\n\n  remove(tree: Tree) {\n    this.#trees = this.#trees.filter((tree_) => tree_.id !== tree.id);\n  }\n\n  reset() {\n    this.#trees = [];\n    this.meta = { ...DefaultMeta };\n  }\n\n  bringToFront(tree: Tree) {\n    tree.zIndex = this.#nextZIndex++;\n  }\n\n  #destinationPageID(proposedID: PageID): PageID {\n    return proposedID >= 0 ? proposedID : (this.meta.currentPageID ?? 0);\n  }\n\n  moveExprInTree(\n    { tree: sourceTree, path: sourceIndexPath }: TreeIndexPath,\n    { tree: destinationTree, path: destinationIndexPath }: TreeIndexPath,\n    displaceTo: Point,\n  ) {\n    if (destinationIndexPath.length === 0) {\n      // Trying to replace root of a tree\n      return;\n    }\n    if (\n      isSameOrAncestor(\n        { tree: sourceTree, path: sourceIndexPath },\n        { tree: destinationTree, path: destinationIndexPath },\n      )\n    ) {\n      // Trying to move an expression such that it becomes a descendant of itself\n      return;\n    }\n\n    const source = nodeForIndexPathInTree(sourceTree, sourceIndexPath);\n\n    const destination = nodeForIndexPathInTree(destinationTree, destinationIndexPath);\n    const destinationParent = nodeForIndexPathInTree(\n      destinationTree,\n      destinationIndexPath.slice(0, -1),\n    );\n\n    if (source === sourceTree.root) {\n      this.remove(sourceTree);\n    } else {\n      const sourceParent = nodeForIndexPathInTree(sourceTree, sourceIndexPath.slice(0, -1));\n\n      setChildAtIndex(sourceParent, sourceIndexPath.at(-1)!, hole);\n    }\n\n    setChildAtIndex(destinationParent, destinationIndexPath.at(-1)!, source);\n    if (!isHoleForEditor(destination)) {\n      this.addNew(destination, displaceTo, this.#destinationPageID(destinationTree.page));\n    }\n  }\n\n  copyExprInTree(\n    { tree: sourceTree, path: sourceIndexPath }: TreeIndexPath,\n    { tree: destinationTree, path: destinationIndexPath }: TreeIndexPath,\n    displaceTo: Point,\n  ) {\n    if (destinationIndexPath.length === 0) {\n      // Trying to replace root of a tree\n      return;\n    }\n\n    const source = nodeForIndexPathInTree(sourceTree, sourceIndexPath);\n\n    const destination = nodeForIndexPathInTree(destinationTree, destinationIndexPath);\n    const destinationParent = nodeForIndexPathInTree(\n      destinationTree,\n      destinationIndexPath.slice(0, -1),\n    );\n\n    if (destination === source || destination === destinationTree.root) return;\n\n    setChildAtIndex(destinationParent, destinationIndexPath.at(-1)!, cloneExpr(source));\n    if (!isHoleForEditor(destination)) {\n      this.addNew(destination, displaceTo, this.#destinationPageID(destinationTree.page));\n    }\n  }\n\n  orphanExpr({ tree, path }: TreeIndexPath, placeAt: Point, copy: boolean): Tree {\n    const expr = nodeForIndexPathInTree(tree, path);\n    if (isHoleForEditor(expr)) return tree;\n\n    const parent = nodeForIndexPathInTree(tree, path.slice(0, -1));\n\n    if (copy) {\n      return this.addNew(cloneExpr(expr), placeAt, this.#destinationPageID(tree.page));\n    }\n\n    if (path.length === 0 || isAtomic(parent)) {\n      // expr is already the root of a tree\n      tree.location = placeAt;\n      return tree;\n    }\n\n    setChildAtIndex(parent, path.at(-1)!, hole);\n    return this.addNew(expr, placeAt, this.#destinationPageID(tree.page));\n  }\n\n  deleteExpr({ tree, path }: TreeIndexPath) {\n    const expr = nodeForIndexPathInTree(tree, path);\n    if (isHoleForEditor(expr)) return;\n\n    const exprParent = nodeForIndexPathInTree(tree, path.slice(0, -1));\n\n    if (path.length === 0 || isAtomic(exprParent)) {\n      // expr is the root of its tree\n      this.remove(tree);\n    } else {\n      setChildAtIndex(exprParent, path.at(-1)!, hole);\n    }\n  }\n\n  replaceExpr(indexPath: TreeIndexPath, newNode: Expr) {\n    if (!indexPath.path.length) {\n      indexPath.tree.root = newNode;\n    } else {\n      setChildAtIndex(\n        nodeAtIndexPath({\n          tree: indexPath.tree,\n          path: indexPath.path.slice(0, -1),\n        }),\n        indexPath.path.at(-1)!,\n        newNode,\n      );\n    }\n  }\n}\n\nfunction nodeForIndexPathInTree(tree: Tree, path: number[]): Expr {\n  return nodeAtIndexPath({ tree, path });\n}\n\nfunction cloneExpr(expr: Expr): Expr {\n  let clone = cloneDeep(expr);\n  switch (clone.kind) {\n    case \"name-binding\":\n      clone = { ...clone, kind: \"var\" };\n      break;\n    case \"type\": {\n      const { type } = clone;\n      if (isTypeNameBinding(type)) {\n        clone = {\n          ...clone,\n          type: {\n            var: type.id,\n          } satisfies TypeVar,\n        };\n      }\n    }\n  }\n  return clone;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}