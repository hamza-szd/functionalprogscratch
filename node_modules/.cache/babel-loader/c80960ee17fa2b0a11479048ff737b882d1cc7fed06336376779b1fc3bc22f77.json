{"ast":null,"code":"import{serializeDatum}from\"../../datum/serialize\";import{isHole}from\"./tree\";import{serializeAttributes}from\"../../expr/attributes\";import{serializeType}from\"../../typechecker/serialize\";export function serializeExprWithAttributes(expr){return(expr.attributes?`; ${serializeAttributes(expr.attributes)}\\n`:\"\")+serializeExpr(expr);}export function serializeExpr(expr){switch(expr.kind){// Datum\ncase\"Boolean\":case\"Number\":case\"String\":return serializeDatum(expr);case\"Symbol\":case\"List\":if(isHole(expr))return\"·\";return`(quote ${serializeDatum(expr)})`;// Type\ncase\"type\":return`(type ${serializeType(expr.type)})`;// Expr\ncase\"name-binding\":if(expr.type)return`(${expr.id} ${serializeType(expr.type)})`;return expr.id;case\"var\":return expr.id;case\"call\":return\"(\"+serializeExpr(expr.called)+(expr.args.length?\" \"+expr.args.map(serializeExpr).join(\" \"):\"\")+\")\";case\"struct\":return\"(struct \"+serializeExpr(expr.name)+\" \"+expr.fields.map(serializeExpr).join(\" \")+\")\";case\"define\":return\"(define \"+serializeExpr(expr.name)+\" \"+serializeExpr(expr.value)+\")\";case\"let\":case\"letrec\":return\"(\"+expr.kind+\" (\"+expr.bindings.map(_ref=>{let[name,valueExpr]=_ref;return\"(\"+serializeExpr(name)+\" \"+serializeExpr(valueExpr)+\")\";}).join(\" \")+\") \"+serializeExpr(expr.body)+\")\";case\"lambda\":return\"(lambda (\"+expr.params.map(serializeExpr).join(\" \")+(expr.returnType?` (→ ${serializeType(expr.returnType)})`:\"\")+\") \"+serializeExpr(expr.body)+\")\";case\"sequence\":return expr.exprs.map(serializeExpr).join(\" \");case\"and\":case\"or\":return\"(\"+[expr.kind,...expr.args.map(serializeExpr)].join(\" \")+\")\";case\"if\":return\"(if \"+serializeExpr(expr.if)+\" \"+serializeExpr(expr.then)+\" \"+serializeExpr(expr.else)+\")\";case\"cond\":return\"(cond (\"+expr.cases.map(_ref2=>{let[condition,value]=_ref2;return serializeExpr(condition)+\" \"+serializeExpr(value);})+\"))\";}}","map":{"version":3,"names":["serializeDatum","isHole","serializeAttributes","serializeType","serializeExprWithAttributes","expr","attributes","serializeExpr","kind","type","id","called","args","length","map","join","name","fields","value","bindings","_ref","valueExpr","body","params","returnType","exprs","if","then","else","cases","_ref2","condition"],"sources":["/Users/hamzashahzad/Desktop/resume_projects/sparkground/src/editor/trees/serialize.ts"],"sourcesContent":["import { Expr } from \"../../expr/expr\";\nimport { serializeDatum } from \"../../datum/serialize\";\nimport { isHole } from \"./tree\";\nimport { serializeAttributes } from \"../../expr/attributes\";\nimport { serializeType } from \"../../typechecker/serialize\";\n\nexport function serializeExprWithAttributes(expr: Expr): string {\n  return (\n    (expr.attributes ? `; ${serializeAttributes(expr.attributes)}\\n` : \"\") + serializeExpr(expr)\n  );\n}\n\nexport function serializeExpr(expr: Expr): string {\n  switch (expr.kind) {\n    // Datum\n    case \"Boolean\":\n    case \"Number\":\n    case \"String\":\n      return serializeDatum(expr);\n\n    case \"Symbol\":\n    case \"List\":\n      if (isHole(expr)) return \"·\";\n      return `(quote ${serializeDatum(expr)})`;\n\n    // Type\n    case \"type\":\n      return `(type ${serializeType(expr.type)})`;\n\n    // Expr\n    case \"name-binding\":\n      if (expr.type) return `(${expr.id} ${serializeType(expr.type)})`;\n      return expr.id;\n    case \"var\":\n      return expr.id;\n    case \"call\":\n      return (\n        \"(\" +\n        serializeExpr(expr.called) +\n        (expr.args.length ? \" \" + expr.args.map(serializeExpr).join(\" \") : \"\") +\n        \")\"\n      );\n    case \"struct\":\n      return (\n        \"(struct \" + serializeExpr(expr.name) + \" \" + expr.fields.map(serializeExpr).join(\" \") + \")\"\n      );\n    case \"define\":\n      return \"(define \" + serializeExpr(expr.name) + \" \" + serializeExpr(expr.value) + \")\";\n    case \"let\":\n    case \"letrec\":\n      return (\n        \"(\" +\n        expr.kind +\n        \" (\" +\n        expr.bindings\n          .map(\n            ([name, valueExpr]) => \"(\" + serializeExpr(name) + \" \" + serializeExpr(valueExpr) + \")\",\n          )\n          .join(\" \") +\n        \") \" +\n        serializeExpr(expr.body) +\n        \")\"\n      );\n    case \"lambda\":\n      return (\n        \"(lambda (\" +\n        expr.params.map(serializeExpr).join(\" \") +\n        (expr.returnType ? ` (→ ${serializeType(expr.returnType)})` : \"\") +\n        \") \" +\n        serializeExpr(expr.body) +\n        \")\"\n      );\n    case \"sequence\":\n      return expr.exprs.map(serializeExpr).join(\" \");\n    case \"and\":\n    case \"or\":\n      return \"(\" + [expr.kind, ...expr.args.map(serializeExpr)].join(\" \") + \")\";\n    case \"if\":\n      return (\n        \"(if \" +\n        serializeExpr(expr.if) +\n        \" \" +\n        serializeExpr(expr.then) +\n        \" \" +\n        serializeExpr(expr.else) +\n        \")\"\n      );\n    case \"cond\":\n      return (\n        \"(cond (\" +\n        expr.cases.map(\n          ([condition, value]) => serializeExpr(condition) + \" \" + serializeExpr(value),\n        ) +\n        \"))\"\n      );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}