{"ast":null,"code":"import{cloneDeep}from\"lodash\";import{Parser}from\"../../expr/parse\";import{Program}from\"../../simulator/program\";import{Untyped}from\"../../typechecker/type\";import{serializeExpr}from\"../trees/serialize\";import{extendIndexPath,nodeAtIndexPath,referencesToBindingInScope,rootIndexPath}from\"../trees/tree\";import{Trees}from\"../trees/trees\";import{EditorRunner}from\"./EditorRunner\";export class Editor{constructor(rerender){this.trees=new Trees();this.runner=void 0;this.rerender=void 0;this.rerender=rerender;this.runner=new EditorRunner(this);}static empty(){return new Editor(()=>{});}deforest(){this.trees.reset();this.rerender();}async cut(indexPath){await this.copy(indexPath);this.trees.deleteExpr(indexPath);this.rerender();}async copy(indexPath){await navigator.clipboard.writeText(serializeExpr(nodeAtIndexPath(indexPath)));}async paste(placeAt){const source=await navigator.clipboard.readText();const exprs=Parser.parseToExprs(source);if(!exprs.length)return;exprs.forEach(expr=>{var _this$trees$meta$curr;this.trees.addNew(expr,placeAt,(_this$trees$meta$curr=this.trees.meta.currentPageID)!==null&&_this$trees$meta$curr!==void 0?_this$trees$meta$curr:0);});this.rerender();}async pasteOver(indexPath,orphanToOrPlaceAt){const source=await navigator.clipboard.readText();const expr=Parser.parseToExpr(source);if(indexPath.path.length){this.trees.orphanExpr(indexPath,orphanToOrPlaceAt,true);this.trees.replaceExpr(indexPath,expr);}else{// Target is the root of a tree; don't replace, just add a new tree\nthis.trees.addNew(expr,orphanToOrPlaceAt,this.trees.meta.currentPageID);}this.rerender();}duplicate(indexPath,placeAt){this.trees.orphanExpr(indexPath,placeAt,true);this.rerender();}delete(indexPath){this.trees.deleteExpr(indexPath);this.rerender();}nameBinding(indexPath){const newName=prompt(\"Enter variable name:\");if(!newName)return;this.trees.replaceExpr(indexPath,{kind:\"name-binding\",id:newName});this.rerender();}renameBinding(binding,scope){const newName=prompt(\"Enter variable name:\");if(!newName)return;const scopeNode=nodeAtIndexPath(scope);if((scopeNode.kind===\"define\"||scopeNode.kind===\"struct\")&&scopeNode.name===binding){const oldName=binding.id;binding.id=newName;for(const tree of this.trees.list()){const references=referencesToBindingInScope(oldName,rootIndexPath(tree));references.forEach(ref=>{ref.id=newName;});}}else{const references=referencesToBindingInScope(binding.id,scope);binding.id=newName;references.forEach(ref=>{ref.id=newName;});}this.rerender();}typeAnnotateBinding(binding){binding.type=Untyped;this.rerender();}removeTypeAnnotationFromBinding(binding){delete binding.type;this.rerender();}returnTypeAnnotateLambda(lambda){lambda.returnType=Untyped;this.rerender();}removeReturnTypeAnnotation(lambda){delete lambda.returnType;this.rerender();}applyAsFunction(varRef,indexPath){this.trees.replaceExpr(indexPath,{kind:\"call\",called:varRef,args:[]});this.rerender();}removeFunctionFromCall(indexPath,placeAt){this.trees.orphanExpr(extendIndexPath(indexPath,0),placeAt,false);this.rerender();}evaluate(indexPath,placeResultAt){const program=new Program(this.trees.list());this.runner.program=program;const result=cloneDeep(program.evalInProgram(indexPath));if(result!==undefined){// FIXME: builtin function representation\nthis.trees.addNew(result,placeResultAt,indexPath.tree.page);}this.rerender();}}export async function typedNodeAtIndexPath(indexPath,tag){return new Promise(resolve=>{const node=nodeAtIndexPath(indexPath);if(node.kind!==tag){console.error(\"unexpected node type at index path\",indexPath,tag);return;}resolve(node);});}","map":{"version":3,"names":["cloneDeep","Parser","Program","Untyped","serializeExpr","extendIndexPath","nodeAtIndexPath","referencesToBindingInScope","rootIndexPath","Trees","EditorRunner","Editor","constructor","rerender","trees","runner","empty","deforest","reset","cut","indexPath","copy","deleteExpr","navigator","clipboard","writeText","paste","placeAt","source","readText","exprs","parseToExprs","length","forEach","expr","_this$trees$meta$curr","addNew","meta","currentPageID","pasteOver","orphanToOrPlaceAt","parseToExpr","path","orphanExpr","replaceExpr","duplicate","delete","nameBinding","newName","prompt","kind","id","renameBinding","binding","scope","scopeNode","name","oldName","tree","list","references","ref","typeAnnotateBinding","type","removeTypeAnnotationFromBinding","returnTypeAnnotateLambda","lambda","returnType","removeReturnTypeAnnotation","applyAsFunction","varRef","called","args","removeFunctionFromCall","evaluate","placeResultAt","program","result","evalInProgram","undefined","page","typedNodeAtIndexPath","tag","Promise","resolve","node","console","error"],"sources":["/Users/hamzashahzad/Desktop/resume_projects/sparkground/src/editor/state/Editor.ts"],"sourcesContent":["import { cloneDeep, isEqual } from \"lodash\";\nimport { Expr, Lambda, NameBinding, Var } from \"../../expr/expr\";\nimport { Parser } from \"../../expr/parse\";\nimport { Program } from \"../../simulator/program\";\nimport { Untyped } from \"../../typechecker/type\";\nimport { serializeExpr } from \"../trees/serialize\";\nimport {\n  TreeIndexPath,\n  extendIndexPath,\n  nodeAtIndexPath,\n  referencesToBindingInScope,\n  rootIndexPath,\n} from \"../trees/tree\";\nimport { Point, Trees } from \"../trees/trees\";\nimport { Datum } from \"../../datum/datum\";\nimport { EditorRunner } from \"./EditorRunner\";\n\nexport class Editor {\n  trees: Trees = new Trees();\n  runner: EditorRunner;\n\n  rerender: () => void;\n\n  constructor(rerender: () => void) {\n    this.rerender = rerender;\n    this.runner = new EditorRunner(this);\n  }\n\n  static empty() {\n    return new Editor(() => {});\n  }\n\n  deforest() {\n    this.trees.reset();\n    this.rerender();\n  }\n\n  async cut(indexPath: TreeIndexPath) {\n    await this.copy(indexPath);\n    this.trees.deleteExpr(indexPath);\n    this.rerender();\n  }\n\n  async copy(indexPath: TreeIndexPath) {\n    await navigator.clipboard.writeText(serializeExpr(nodeAtIndexPath(indexPath)));\n  }\n\n  async paste(placeAt: Point) {\n    const source = await navigator.clipboard.readText();\n\n    const exprs = Parser.parseToExprs(source);\n    if (!exprs.length) return;\n\n    exprs.forEach((expr) => {\n      this.trees.addNew(expr, placeAt, this.trees.meta.currentPageID ?? 0);\n    });\n    this.rerender();\n  }\n\n  async pasteOver(indexPath: TreeIndexPath, orphanToOrPlaceAt: Point) {\n    const source = await navigator.clipboard.readText();\n    const expr = Parser.parseToExpr(source);\n\n    if (indexPath.path.length) {\n      this.trees.orphanExpr(indexPath, orphanToOrPlaceAt, true);\n      this.trees.replaceExpr(indexPath, expr);\n    } else {\n      // Target is the root of a tree; don't replace, just add a new tree\n      this.trees.addNew(expr, orphanToOrPlaceAt, this.trees.meta.currentPageID!);\n    }\n    this.rerender();\n  }\n\n  duplicate(indexPath: TreeIndexPath, placeAt: Point) {\n    this.trees.orphanExpr(indexPath, placeAt, true);\n    this.rerender();\n  }\n\n  delete(indexPath: TreeIndexPath) {\n    this.trees.deleteExpr(indexPath);\n    this.rerender();\n  }\n\n  nameBinding(indexPath: TreeIndexPath): void {\n    const newName = prompt(\"Enter variable name:\");\n    if (!newName) return;\n\n    this.trees.replaceExpr(indexPath, { kind: \"name-binding\", id: newName });\n    this.rerender();\n  }\n\n  renameBinding(binding: NameBinding, scope: TreeIndexPath): void {\n    const newName = prompt(\"Enter variable name:\");\n    if (!newName) return;\n\n    const scopeNode = nodeAtIndexPath(scope);\n    if (\n      (scopeNode.kind === \"define\" || scopeNode.kind === \"struct\") &&\n      scopeNode.name === binding\n    ) {\n      const oldName = binding.id;\n\n      binding.id = newName;\n      for (const tree of this.trees.list()) {\n        const references: Var[] = referencesToBindingInScope(oldName, rootIndexPath(tree));\n        references.forEach((ref) => {\n          ref.id = newName;\n        });\n      }\n    } else {\n      const references: Var[] = referencesToBindingInScope(binding.id, scope);\n      binding.id = newName;\n      references.forEach((ref) => {\n        ref.id = newName;\n      });\n    }\n\n    this.rerender();\n  }\n\n  typeAnnotateBinding(binding: NameBinding) {\n    binding.type = Untyped;\n    this.rerender();\n  }\n\n  removeTypeAnnotationFromBinding(binding: NameBinding) {\n    delete binding.type;\n    this.rerender();\n  }\n\n  returnTypeAnnotateLambda(lambda: Lambda) {\n    lambda.returnType = Untyped;\n    this.rerender();\n  }\n\n  removeReturnTypeAnnotation(lambda: Lambda) {\n    delete lambda.returnType;\n    this.rerender();\n  }\n\n  applyAsFunction(varRef: Var, indexPath: TreeIndexPath) {\n    this.trees.replaceExpr(indexPath, { kind: \"call\", called: varRef, args: [] });\n    this.rerender();\n  }\n\n  removeFunctionFromCall(indexPath: TreeIndexPath, placeAt: Point) {\n    this.trees.orphanExpr(extendIndexPath(indexPath, 0), placeAt, false);\n    this.rerender();\n  }\n\n  evaluate(indexPath: TreeIndexPath, placeResultAt: Point) {\n    const program = new Program(this.trees.list());\n    this.runner.program = program;\n\n    const result = cloneDeep(program.evalInProgram(indexPath));\n\n    if (result !== undefined) {\n      // FIXME: builtin function representation\n      this.trees.addNew(result as Datum, placeResultAt, indexPath.tree.page);\n    }\n\n    this.rerender();\n  }\n}\n\nexport async function typedNodeAtIndexPath<Tag extends string>(\n  indexPath: TreeIndexPath,\n  tag: Tag,\n): Promise<Expr & { kind: Tag }> {\n  return new Promise((resolve) => {\n    const node = nodeAtIndexPath(indexPath);\n    if (node.kind !== tag) {\n      console.error(\"unexpected node type at index path\", indexPath, tag);\n      return;\n    }\n\n    resolve(node as any);\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}